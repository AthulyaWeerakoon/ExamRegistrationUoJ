@page "/student-register/{examId:int}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using ExamRegistrationUoJ.Services.DBInterfaces
@using System
@using System.Data
@using System.Globalization

@inject HttpClient _httpClient;
@using Microsoft.AspNetCore.Components.Forms;
@using System.Net.Http.Headers;


@rendermode InteractiveServer
@using StudentPages
@attribute [Authorize(Policy = "IsStudent")]

@inject IDBServiceSR db
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager nav

<PageTitle>Exam Registration</PageTitle>

@if (page == null)
{
    <Elements.LoadingPanel />
}
else if (page.departments == null || page.students == null || page.examTitle == null || page.addedCourses == null)
{
    <Elements.LoadingPanel />
}
else
{
    <Elements.AddressPath displayNames=displayNames linkingAddresses=addresses />

    @try
    {
        DataRow rowE = page.examTitle.Rows[0];
        <div class="exam-name">@MidOrEnd(ToTitleCase((string)@rowE["exam_name"]))</div>
        <div class="semester-name">@ToTitleCase((string)@rowE["semester_name"])</div>
        <div class="department-container">
            <span>@rowE["batch"]:</span>
            <select @onchange="async (e) => await DepartmentChanged(e)">
                <option selected disabled hidden>Department</option>
                @foreach (DataRow rowD in page.departments.Rows)
                {
                    <option value="@rowD["id"]">@rowD["name"]</option>
                }
                <option value="0">All</option>
            </select>
        </div>
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error initializing page: {ex.Message}");
        Console.WriteLine(ex.StackTrace);
    }

    <div class="main-container">
        @if (page.students != null && page.students.Rows.Count > 0)
        {
            var studentFullName = page.students.Rows[0]["name"].ToString();
            var studentEmail = page.students.Rows[0]["ms_email"].ToString();
            string[] parts = studentEmail.Split('@');
            var RegistrationNumber = parts[0];

            <div class="RegNum">
                <label>Student Registration Number :</label>
                <div class="input-div">
                    <input type="text" id="RegNum" name="RegNum" value="@RegistrationNumber" disabled required />
                </div>
            </div>
            <div class="FullName">
                <label>Student Full Name :</label>
                <div class="input-div">
                    <input type="text" id="FullName" name="FullName" value="@studentFullName" disabled required />
                </div>
            </div>
        }
        <div class="Repeat">
            <label>Repeat Student :</label>
            <div class="input-div">
                <input type="checkbox" id="Repeat" @bind="page.isRepeat" />
            </div>
        </div>

        @if (page.isRepeat)
        {
            <div id="AdvisorPayment" name="AdvisorPayment">
                <div class="Advisor">
                    <label>Advisor Email :</label>
                    <div class="input-div">
                        <Elements.AutofillInput AutofillSuggestions="emailList" OnChange="@(async (text) => { await AdvisorId(text); StateHasChanged(); })" />
                    </div>
                </div>
                <div class="Payment">
                    <label>Payment Receipt :</label>
                    <div class="input-div">

                        <label class="payment-label" for="Payment">Upload Payment File</label>
                        <InputFile id="Payment" name="Payment" accept=".pdf" style="display:none" OnChange=HandleFileSelected />

                        <!-- file upload -->
                        @if (_currentFile != null)
                        {
                            <div class="card-body p-2 bd-highlight">
                                <div class="d-grid gap-3 ">
                                    <div class="p-2 bg-light border mt-1"><p>Name: @_currentFile.Name</p></div>
                                    <div class="p-2 bg-light border">Size in bytes: @_currentFile.Size</div>
                                </div>

                                <button type="button" class="btn btn-primary mt-3" @onclick="UploadFileAsync">Confirm Upload</button>
                                @{
                                    page.paymentReceipt = $"https://exam-registration-file-upload-s3-bucket.s3.ap-southeast-1.amazonaws.com/{_currentFile.Name}";
                                }
                            </div>
                        }

                        <!---->

                    </div>
                </div>
            </div>
        }
        <div class="confirm-button">
            <button class="confirm" type="submit" @onclick="OnConfirmClicked">
                Register for Exam
            </button>
        </div>

        @if (isLoading)
        {
            <Elements.LoadingPanel />
        }

        @if (student_in_exam_id != null)
        {
            <div class="additional-text">
                <span>[ADD OR DROP SUBJECTS ACCORDINGLY]</span>
            </div>

            <table>
                <thead>
                    <tr style="background-color:#42D0EF;">
                        <th>Course Code</th>
                        <th>Course</th>
                        <th>Course Co-ordinator</th>
                        <th>ADD or DROP</th>
                    </tr>
                </thead>
                <tbody id="table-body">
                    @if (page.addedCourses != null)
                    {
                        @foreach (DataRow row in page.addedCourses.Rows)
                        {
                            <tr value="@row["course_in_exam_id"]">
                                <td>@row["course_code"]</td>
                                <td>@row["course_name"]</td>
                                <td>@row["coordinator_email"]</td>
                                <td>
                                    <button class="AddDrop" @onclick="() => ToggleCourse(row)">
                                        @(GetCourseState(row["course_in_exam_id"].ToString()) ? "Drop" : "Add")
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                    @if (page.notAddedCourses != null)
                    {
                        @foreach (DataRow row in page.notAddedCourses.Rows)
                        {
                            <tr value="@row["course_in_exam_id"]">
                                <td>@row["course_code"]</td>
                                <td>@row["course_name"]</td>
                                <td>@row["coordinator_email"]</td>
                                <td>
                                    <button class="AddDrop" @onclick="() => ToggleCourse(row)">
                                        @(GetCourseState(row["course_in_exam_id"].ToString()) ? "Drop" : "Add")
                                    </button>
                                </td>
                            </tr>
                        }

                    }

                    @foreach (DataRow row in CourseStates.Rows)
                    {
                        Console.WriteLine(row["course_in_exam_id"] + " " + row["is_added"]);
                    }

                </tbody>
            </table>

            <div style="height: 50px; padding-top:10px">
                <button class="add-courses" type="submit" @onclick="HandleConfirm">
                    Confirm
                </button>
            </div>
        }
        else
        {
            Console.WriteLine($"Error confirming registration");
            Console.WriteLine(student_id + " logged st id");
        }

        <p style="margin-bottom:100px"></p>
    </div>
}

<DialogBoxes.DialogOptions Opened=showDialogBox Title="Invalid File" Message="Invalid file type or size. Please upload a PDF file that is under 1MB." Buttons=showDialogOptions ClosedCallback="() => { showDialogBox = false; StateHasChanged(); }" />
<DialogBoxes.DialogOptions Opened=showConfirmDialogBox Title="Confirm registered courses" Message="Click confirm to register the selected courses." Buttons=showConfirmDialogOptions ClosedCallback="() => { showConfirmDialogBox = false; StateHasChanged(); }" />

@code {
    private bool isLoading = false;

    [Parameter] public int examId { get; set; }
    public uint exam_id { get; set; }

    private StudentReg page;

    public uint student_id { get; set; }

    private uint department_id;

    public int? student_in_exam_id;

    // For addresses
    private List<string?> addresses = new List<string?> { "student-home", null };
    private List<string> displayNames = new List<string> { "Student Home", "Exam Registration" };

    //for dialogbox
    private bool showDialogBox = false;
    private string[] showDialogOptions = { "Close" };

    private bool showConfirmDialogBox = false;
    private string[] showConfirmDialogOptions = { "Confirm" };

    /// <summary>
    private DataTable CourseStates;
    private void ToggleCourse(DataRow row)
    {
        var courseId = row["course_in_exam_id"].ToString();
        foreach (DataRow stateRow in CourseStates.Rows)
        {
            if (stateRow["course_in_exam_id"].ToString() == courseId)
            {
                stateRow["is_added"] = !(bool)stateRow["is_added"];
                break;
            }
        }
        StateHasChanged();
    }

    private bool GetCourseState(string courseId)
    {
        foreach (DataRow row in CourseStates.Rows)
        {
            if (row["course_in_exam_id"].ToString() == courseId)
            {
                return (bool)row["is_added"];
            }
        }
        return false;
    }

    private async Task HandleConfirm()
    {
        await page.setStudentRegistration(CourseStates, student_in_exam_id);
        StateHasChanged();
        showConfirmDialogBox = true;
    }
    /// </summary>

    private List<string> emailList = new List<string>();

    private async Task DepartmentChanged(ChangeEventArgs e)
    {
        page.departmentOpt = e.Value.ToString();
        department_id = uint.TryParse(page.departmentOpt, out var id) ? id : 0;
        await page.getCoursesInStudentRegistration(student_in_exam_id, department_id);
        await page.getCoursesNotInStudentRegistration(examId, student_in_exam_id, department_id);
        StateHasChanged();
    }

    private async Task AdvisorId(string input)
    {
        await page.getAdvisorId(input);
        StateHasChanged();
    }

    private async Task ConfirmRegistration()
    {
        try
        {
            if (page.isRepeat == false)
            {
                student_in_exam_id = await page.setStudentInExam(student_id, exam_id, 1, page.advisorId);
                await page.getCoursesInStudentRegistration(student_in_exam_id, department_id);
                await page.getCoursesNotInStudentRegistration(examId, student_in_exam_id, department_id);
                if (page.addedCourses != null)
                {
                    foreach (DataRow row in page.addedCourses.Rows)
                    {
                        CourseStates.Rows.Add(row["course_in_exam_id"], true);
                    }
                }
                if (page.notAddedCourses != null)
                {
                    foreach (DataRow row in page.notAddedCourses.Rows)
                    {
                        CourseStates.Rows.Add(row["course_in_exam_id"], false);
                    }
                }
            }
            else
            {
                student_in_exam_id = await page.setStudentInExam(student_id, exam_id, 0, page.advisorId);
                await page.setPayments(student_id, exam_id, page.paymentReceipt);
                await page.getCoursesInStudentRegistration(student_in_exam_id, department_id);
                await page.getCoursesNotInStudentRegistration(examId, student_in_exam_id, department_id);
                if (page.addedCourses != null)
                {
                    foreach (DataRow row in page.addedCourses.Rows)
                    {
                        CourseStates.Rows.Add(row["course_in_exam_id"], true);
                    }
                }
                if (page.notAddedCourses != null)
                {
                    foreach (DataRow row in page.notAddedCourses.Rows)
                    {
                        CourseStates.Rows.Add(row["course_in_exam_id"], false);
                    }
                }
            }

            Console.WriteLine("Registration confirmed.");

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error confirming registration: {ex.Message}");
            Console.WriteLine(ex.StackTrace);
        }
    }

    private async Task OnConfirmClicked()
    {
        isLoading = true;
        try
        {
            await ConfirmRegistration();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadInitialData()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (!user.Identity.IsAuthenticated)
            {
                throw new Exception("User is not authenticated.");
            }

            var emailClaim = user.Claims.FirstOrDefault(c =>
                c.Type == "email" ||
                c.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress");

            if (emailClaim == null)
            {
                throw new Exception("Email claim not found.");
            }

            var email = emailClaim.Value;
            var studentIdNullable = await page.getStudentIdByEmail(email);

            if (studentIdNullable == null)
            {
                throw new Exception("Student ID not found for the provided email.");
            }

            student_id = (uint)studentIdNullable;
        }
        catch (Exception ex)
        {
            Console.WriteLine("Failed to load initial data: " + ex.Message);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            exam_id = (uint)examId;

            //
            //FilesInS3 = await _httpClient.GetFromJsonAsync<List<Files>>($"{nav.BaseUri}api/S3/") ?? new();
            //

            page = new StudentReg(db);
            await LoadInitialData();
            await page.init();
            await page.getDepartmentsInExam(exam_id);
            await page.getStudent(student_id);
            await page.getExamTitle(exam_id);
            await page.getCoursesInStudentRegistration(student_in_exam_id, department_id);
            await page.getCoursesNotInStudentRegistration(examId, student_in_exam_id, department_id);

            //
            CourseStates = new DataTable();
            CourseStates.Columns.Add("course_in_exam_id");
            CourseStates.Columns.Add("is_added", typeof(bool));


            foreach (DataRow row in CourseStates.Rows)
            {
                Console.WriteLine(row["course_in_exam_id"] + " " + row["is_added"]);
            }

            //

            emailList = page.advisors.AsEnumerable().Select(row => Convert.ToString(row["email"])).ToList();

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing page: {ex.Message}");
            Console.WriteLine(ex.StackTrace);
        }
    }

    public static string ToTitleCase(string input)
    {
        if (string.IsNullOrEmpty(input))
        {
            return input;
        }

        TextInfo textInfo = CultureInfo.CurrentCulture.TextInfo;
        return textInfo.ToTitleCase(input.ToLower());
    }

    public static string MidOrEnd(string input)
    {
        return input != null && input.Contains("mid", StringComparison.OrdinalIgnoreCase)
            ? "Register For Mid Semester Examination"
            : "Register For End Semester Examination";
    }



    /// <summary>
    public List<Files> FilesInS3 { get; set; } = new();
    public IBrowserFile? _currentFile = null;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        _currentFile = e.File;
        if (_currentFile != null && _currentFile.ContentType == "application/pdf" && _currentFile.Size <= 1024 * 1024)
        {
            var ms = new MemoryStream();
            await _currentFile.OpenReadStream().CopyToAsync(ms);
            ms.Position = 0;
            var fileContent = new StreamContent(ms);
            fileContent.Headers.ContentType = new MediaTypeHeaderValue("application/pdf");
            fileContent.Headers.ContentDisposition = new ContentDispositionHeaderValue("attachment")
                {
                    FileName = _currentFile.Name
                };
        }
        else
        {
            _currentFile = null;
            showDialogBox = true;
            StateHasChanged();
        }
    }

    public async Task UploadFileAsync()
    {
        if (_currentFile == null)
            return;

        var content = new MultipartFormDataContent();
        var fileContent = new StreamContent(_currentFile.OpenReadStream(1024000));

        content.Add(
            content: fileContent,
            name: "\"file\"",
            fileName: _currentFile.Name);

        var response = await _httpClient.PostAsync($"{nav.BaseUri}api/S3/upload", content);
        response.EnsureSuccessStatusCode();
        FilesInS3 = await _httpClient.GetFromJsonAsync<List<Files>>($"{nav.BaseUri}api/S3/") ?? new();

        _currentFile = null;
    }

    public class Files
    {
        public string ETag { get; set; } = string.Empty;
        public string Key { get; set; } = string.Empty;
        public string BucketName { get; set; } = string.Empty;
        public long Size { get; set; } = 0;
    }

    /// </summary>
}