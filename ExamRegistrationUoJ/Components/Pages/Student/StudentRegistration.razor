@page "/student-register"
@using Microsoft.AspNetCore.Authorization
@using ExamRegistrationUoJ.Services.DBInterfaces
@using System
@using System.Data
@using System.Globalization

@rendermode InteractiveServer
@using StudentPages
@attribute [Authorize(Policy = "IsStudent")]

@inject IDBServiceSR db

<PageTitle>Exam Registration</PageTitle>

@if (page == null)
{
    <Elements.LoadingPanel />
}
else if (page.departments == null || page.students == null || page.examTitle == null)
{
    <Elements.LoadingPanel />
}
else
{
    @if (page.paymentReceipt != null)
    {
        Console.WriteLine("Payment file received");
    }
    else
    {
        Console.WriteLine("Payment file null");
    }
    <div class="StdReg">
        @try
        {
            DataRow rowE = page.examTitle.Rows[0];
            <h3><u>@MidOrEnd(ToTitleCase((string)@rowE["exam_name"]))</u></h3>
            <h3><u>@ToTitleCase((string)@rowE["semester_name"])</u></h3>
            <div class="department-container">
                <h3>
                    <span>@rowE["batch"]:</span>
                    <select @onchange="async (e) => await DepartmentChanged(e)">
                        <option selected disabled hidden>Department</option>
                        @foreach (DataRow rowD in page.departments.Rows)
                        {
                            <option value="@rowD["id"]">@rowD["name"]</option>
                        }
                        <option>All</option>
                    </select>
                </h3>
            </div>
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing page: {ex.Message}");
            Console.WriteLine(ex.StackTrace);
        }

        <div class="main-container">
            @if (page.students != null && page.students.Rows.Count > 0)
            {
                @if (page.students != null && page.students.Rows.Count > 0)
                {
                    var studentFullName = page.students.Rows[0]["name"].ToString();
                    var studentEmail = page.students.Rows[0]["ms_email"].ToString();
                    string[] parts = studentEmail.Split('@');
                    var RegistrationNumber = parts[0];

                    <div>
                        <label for="RegNum">Student Registration Number :</label>
                        <input type="text" id="RegNum" name="RegNum" value="@RegistrationNumber" disabled required />
                    </div>
                    <div>
                        <label for="FullName">Student Full Name :</label>
                        <input type="text" id="FullName" name="FullName" value="@studentFullName" disabled required />
                    </div>
                }
            }
            <div style="display: inline-flex; align-items: center;">
                <label for="Repeat">Repeat Student :</label>
                <input type="checkbox" id="Repeat" @bind="page.isRepeat" />
            </div>

            @if (page.isRepeat)
            {
                <div id="AdvisorPayment" name="AdvisorPayment">
                    <div>
                        <label for="Advisor">Advisor Email :</label>
                        <input type="text" id="Advisor" name="Advisor" @onchange="async (e) => await AdvisorId(e)" required />
                    </div>
                    <div>
                        <label for="Payment">Payment Receipt :</label>
                        <InputFile id="Payment" name="Payment" accept=".pdf, .jpg, .jpeg, .png" OnChange="HandleFileChanged" />
                    </div>
                </div>
            }

            <p></p>
            <p style="line-height: 2.5;"><b>[ADD OR DROP SUBJECTS ACCORDINGLY]</b></p>
            <table>
                <thead>
                    <tr style="background-color:#42D0EF;">
                        <th>Course Code</th>
                        <th>Course</th>
                        <th>Course Co-ordinator</th>
                        <th>ADD or DROP</th>
                    </tr>
                </thead>
                <tbody id="table-body">
                    @foreach (DataRow row in page.courses.Rows)
                    {
                        string str = @row["id"].ToString();
                        <tr value="@row["id"]">
                            <td>@row["course_code"]</td>
                            <td>@row["course_name"]</td>
                            <td>@row["coordinator_email"]</td>                      
                            <td><button class="AddDrop" id="AddDrop_@row["id"]" @onclick="() => CourseAddDrop(str)">@addDropLabels[@row["id"].ToString()]</button></td>
                        </tr>
                    }
                </tbody>
            </table>

            <button class="Confirm" type="submit" @onclick="async () => await ConfirmRegistration()">
                Confirm
            </button>
            <p style="margin-bottom:100px"></p>
        </div>
    </div>
}

<script type="text/JavaScript">
    function toggleText(AddDropButton) {
        if (AddDropButton.textContent === "Add") {
            AddDropButton.textContent = "Drop";
        } else {
            AddDropButton.textContent = "Add";
        }
    }
</script>
@code {
    private StudentReg page;

    [Parameter]
    public string exam_id { get; set; }
    private uint examId;

    [Parameter]
    public string student_id { get; set; }
    private uint studentId;

    private uint depId;
    private string? aEmail;
    private uint? aId;

    private Dictionary<string, string> addDropLabels = new Dictionary<string, string>();
    private Dictionary<string, bool> addDrops = new Dictionary<string, bool>();

    private async Task HandleFileChanged(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);
        page.paymentReceipt = buffer;
    }

    private async Task DepartmentChanged(ChangeEventArgs e)
    {
        page.departmentOpt = e.Value.ToString();
        depId = uint.TryParse(page.departmentOpt, out var id) ? id : 0;
        await page.getCourses(examId, depId);
        StateHasChanged();
    }

    private async Task AdvisorId(ChangeEventArgs e)
    {
        page.advisor_email = e.Value.ToString();
        aEmail = page.advisor_email?.ToString() ?? "";
        await page.getAdvisorId(aEmail);        
        StateHasChanged();
    }

    private async Task CourseAddDrop(string id)
    {
        if (addDrops.ContainsKey(id))
        {
            addDrops[id] = !addDrops[id];
            addDropLabels[id] = addDrops[id] ? "Drop" : "Add";
            StateHasChanged();
            await page.setStudentExam(studentId, examId, Convert.ToUInt32(page.isRepeat), Convert.ToUInt32(page.advisorId));
        }
    }

    private async Task ConfirmRegistration()
    {
        try
        {
            //await page.setStudentExam(studentId, examId, Convert.ToUInt32(page.isRepeat), Convert.ToUInt32(page.advisorId));
            Console.WriteLine("Registration confirmed.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error confirming registration: {ex.Message}");
            Console.WriteLine(ex.StackTrace);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            examId = 1;
            studentId = 1;
            page = new StudentReg(db);
            await page.init();
            await page.getStudent(studentId);
            await page.getCourses(examId, depId);
            await page.getExamTitle(examId);
            

            foreach (DataRow row in page.courses.Rows)
            {
                addDropLabels[@row["id"].ToString()] = "Add";
                addDrops[@row["id"].ToString()] = false;
            }

            
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing page: {ex.Message}");
            Console.WriteLine(ex.StackTrace);
        }
    }

    public static string ToTitleCase(string input)
    {
        if (string.IsNullOrEmpty(input))
        {
            return input;
        }

        TextInfo textInfo = CultureInfo.CurrentCulture.TextInfo;
        return textInfo.ToTitleCase(input.ToLower());
    }

    public static string MidOrEnd(string input)
    {
        return input != null && input.Contains("mid", StringComparison.OrdinalIgnoreCase)
            ? "Register For Mid Semester Examination"
            : "Register For End Semester Examination";
    }
}
