@page "/student-register"
@using Microsoft.AspNetCore.Authorization
@using ExamRegistrationUoJ.Services.DBInterfaces
@using System
@using System.Data
@using System.Globalization

@rendermode InteractiveServer
@using StudentPages
@attribute [Authorize(Policy = "IsStudent")]

@inject IDBServiceSR db

<PageTitle>Exam Registration</PageTitle>

@if (page == null)
{
    <Elements.LoadingPanel />
}
else if (page.departments == null || page.students == null || page.courses == null || page.examTitle == null || page.test_dt == null)
{
    <Elements.LoadingPanel />
}
else
{
    <section class="student-path">
        <div class="path"><a href="/student-home">Student Home</a> / <a href="/student-register">Register</a></div>
    </section>

    @try
    {
        DataRow rowE = page.examTitle.Rows[0];
        <h3>@MidOrEnd(ToTitleCase((string)@rowE["exam_name"]))</h3>
        <h3>@ToTitleCase((string)@rowE["semester_name"])</h3>
        <div class="department-container">
            <h3>
                <span>@rowE["batch"]:</span>
                <select @onchange="async (e) => await DepartmentChanged(e)">
                    <option selected disabled hidden>Department</option>
                    @foreach (DataRow rowD in page.departments.Rows)
                    {
                        <option value="@rowD["id"]">@rowD["name"]</option>
                    }
                    <option>All</option>
                </select>
            </h3>
        </div>
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error initializing page: {ex.Message}");
        Console.WriteLine(ex.StackTrace);
    }

    <div class="main-container">
        @if (page.students != null && page.students.Rows.Count > 0)
        {
            var studentFullName = page.students.Rows[0]["name"].ToString();
            var studentEmail = page.students.Rows[0]["ms_email"].ToString();
            string[] parts = studentEmail.Split('@');
            var RegistrationNumber = parts[0];

            <div class="RegNum">
                <label for="RegNum">Student Registration Number :</label>
                <div class="input-div">
                    <input type="text" id="RegNum" name="RegNum" value="@RegistrationNumber" disabled required />
                </div>
            </div>
            <div class="FullName">
                <label for="FullName">Student Full Name :</label>
                <div class="input-div">
                    <input type="text" id="FullName" name="FullName" value="@studentFullName" disabled required />
                </div>
            </div>
        }
        <div class="Repeat">
            <label for="Repeat">Repeat Student :</label>
            <div class="input-div">
                <input type="checkbox" id="Repeat" @bind="page.isRepeat" />
            </div>            
        </div>

        @if (page.isRepeat)
        {
            <div id="AdvisorPayment" name="AdvisorPayment">
                <div class="Advisor">
                    <label for="Advisor">Advisor Email :</label>
                    <div class="input-div">
                        <Elements.AutofillInput AutofillSuggestions="emailList" OnChange="@(async (text) => { await AdvisorId(text); StateHasChanged(); })" />
                        @{
                            Console.WriteLine("Advisor ID = " + page.advisorId);
                        }
                    </div>                    
                </div>
                <div class="Payment">
                    <label for="Payment">Payment Receipt :</label>
                    <div class="input-div">
                        <InputFile id="Payment" name="Payment" accept=".pdf, .jpg, .jpeg, .png" OnChange="HandleFileChanged" />
                        @{
                            Console.WriteLine("payement file = " + page.paymentReceipt);
                            Console.WriteLine("payement file type = " + page.fileType);
                        }
                    </div>                    
                </div>
            </div>
        }
        <div class="confirm-button">
            <button class="confirm" type="submit" @onclick="async () => await ConfirmRegistration()">
                Confirm
            </button>
        </div>
        

        @if(student_in_exam_id != null)
        {
            <p style="line-height: 2.5;"><b>[ADD OR DROP SUBJECTS ACCORDINGLY]</b></p>
            <table>
                <thead>
                    <tr style="background-color:#42D0EF;">
                        <th>Course Code</th>
                        <th>Course</th>
                        <th>Course Co-ordinator</th>
                        <th>ADD or DROP</th>
                    </tr>
                </thead>
                <tbody id="table-body">
                    @foreach (DataRow row in page.courses.Rows)
                    {
                        uint course_id = (uint)@row["course_id"];
                        string course_in_exam_id = @row["id"].ToString();
                        <tr value="@row["id"]">
                            <td>@row["course_code"]</td>
                            <td>@row["course_name"]</td>
                            <td>@row["coordinator_email"]</td>
                            <td><button class="AddDrop" id="AddDrop_@row["id"]" @onclick="@(async () => { await CourseAddDrop(course_in_exam_id); })">@addDropLabels[course_in_exam_id]</button></td>
                        </tr>
                        Console.WriteLine("Course in exam id : " + @row["id"]/*courseInExamId*/ + " course_code " + @row["course_code"]);
                    }
                    @{
                        Console.WriteLine("Student in exam id : " + student_in_exam_id);
                        //Console.WriteLine("Student in exam id : " + page.studentInExamId);
                    }
                </tbody>
            </table>
        }
        else
        {
            Console.WriteLine($"Error confirming registration");
        }


        
        @foreach(DataRow row_t in page.test_dt.Rows){
            //Console.WriteLine("id " + row_t["id"] + " student_id " + row_t["student_id"] + " exam_id " + row_t["exam_id"] + " is_proper " + row_t["is_proper"] + " advisor_id " + row_t["advisor_id"] + " advisor_approved " + row_t["advisor_approved"]);
        }
        <p style="margin-bottom:100px"></p>
    </div>
}

@code {
    private StudentReg page;

    private string? inputResult = "";

    [Parameter]
    public uint exam_id { get; set; }

    [Parameter]
    public uint student_id { get; set; }

    private uint depId;
    private string? aEmail;
    private uint? aId;
    public int? student_in_exam_id;

    private Dictionary<string, string> addDropLabels = new Dictionary<string, string>();
    private Dictionary<string, bool> addDrops = new Dictionary<string, bool>();

    private List<string> emailList = new List<string>();

    private async Task HandleFileChanged(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);
        page.paymentReceipt = buffer;
        page.fileType = file.ContentType;
    }

    private async Task DepartmentChanged(ChangeEventArgs e)
    {
        page.departmentOpt = e.Value.ToString();
        depId = uint.TryParse(page.departmentOpt, out var id) ? id : 0;
        await page.getCourses(exam_id, depId);
        StateHasChanged();
    }

    private async Task AdvisorId(string input)
    {
        await page.getAdvisorId(input);        
        StateHasChanged();
    }

    private async Task ConfirmRegistration()
    {
        try
        {
            uint isproper = page.isRepeat ? 1u : 0u;
            if (await page.setPayments(student_id, exam_id, page.paymentReceipt, page.fileType) == -1)
            { 
                Console.WriteLine("paymennt file is already existing."); 
            }
            else 
            { 
                Console.WriteLine("new paymennt file"); 
            }
            student_in_exam_id = await page.setStudentInExam(student_id, exam_id, isproper, page.advisorId);
            Console.WriteLine("Registration confirmed.");

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error confirming registration: {ex.Message}");
            Console.WriteLine(ex.StackTrace);
        }
    }

    private async Task CourseAddDrop(string id)
    {
        if (addDrops.ContainsKey(id))
        {
            uint courseInExamId = Convert.ToUInt32(id);
            addDrops[id] = !addDrops[id];
            addDropLabels[id] = addDrops[id] ? "Drop" : "Add";
            await page.setStudentRegistration((uint)student_in_exam_id, courseInExamId, addDropLabels[id]);
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            exam_id = 1;
            student_id = 1;

            page = new StudentReg(db);
            await page.init();
            await page.getStudent(student_id);
            await page.getCourses(exam_id, depId);
            await page.getExamTitle(exam_id);
            await page.test();

            emailList = page.advisors.AsEnumerable().Select(row => Convert.ToString(row["email"])).ToList();

            foreach (DataRow row in page.courses.Rows)
            {
                addDropLabels[@row["id"].ToString()] = "Add";
                addDrops[@row["id"].ToString()] = false;
            }   
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing page: {ex.Message}");
            Console.WriteLine(ex.StackTrace);
        }
    }

    public static string ToTitleCase(string input)
    {
        if (string.IsNullOrEmpty(input))
        {
            return input;
        }

        TextInfo textInfo = CultureInfo.CurrentCulture.TextInfo;
        return textInfo.ToTitleCase(input.ToLower());
    }

    public static string MidOrEnd(string input)
    {
        return input != null && input.Contains("mid", StringComparison.OrdinalIgnoreCase)
            ? "Register For Mid Semester Examination"
            : "Register For End Semester Examination";
    }
}
