@page "/student-register"
@using Microsoft.AspNetCore.Authorization
@using ExamRegistrationUoJ.Services.DBInterfaces
@using System.Data
@rendermode InteractiveServer
@using StudentPages
@attribute [Authorize(Policy = "IsStudent")]

@inject IDBServiceSR db

<PageTitle>Exam Registration</PageTitle>

@if (page == null)
{
    <Elements.LoadingPanel />
}
else if (page.departments == null || page.students == null || page.displayCourses == null)
{
    <Elements.LoadingPanel />
}
else
{
    <h3><u>Register for End Semester Examination</u></h3>
    <h3><u>Semester 06</u></h3> <!-- get semester from semesters table which has to be corresponding to the data send from previous page-->
    <div class="department-container">
        <h3>
            <span>E20 Batch:</span> <!-- get batch from exams table which has to be corresponding to the data send from previous page-->
            <select @onchange="async (e) => { page.departmentOpt = ((ChangeEventArgs)e).Value.ToString(); await page.filterCourses(); StateHasChanged(); }">            
                <option selected disabled hidden>Department</option>
                @foreach (DataRow row in page.departments.Rows)
                {
                    <option value="@row["id"]">@row["name"]</option>
                }
                <option>All</option>
            </select>
        </h3>
    </div>
    <div class="main-container">
        @if (page.students != null && page.students.Rows.Count > 0)
        {
            @if (page.students != null && page.students.Rows.Count > 0)
            {
                var studentFullName = page.students.Rows[0]["name"].ToString();
                var studentEmail = page.students.Rows[0]["ms_email"].ToString();
                string[] parts = studentEmail.Split('@');
                var RegistrationNumber = parts[0];

                <div>
                    <label for="RegNum">Student Registration Number :</label>
                    <input type="text" id="RegNum" name="RegNum" value="@RegistrationNumber" disabled required />
                </div>
                <div>
                    <label for="FullName">Student Full Name :</label>
                    <input type="text" id="FullName" name="FullName" value="@studentFullName" disabled required />
                </div>
            }
        }
        <div style="display: inline-flex; align-items: center;">
            <label for="Repeat">Repeat Student :</label>
            <input type="checkbox" id="Repeat" name="Repeat" onchange="showAdvisorPayment()" /> <!-- set whether proper or repeat(is_proper) at students_in_exam table-->
        </div>

        <div id="AdvisorPayment" name="AdvisorPayment" style="display:none">
            <div>
                <label for="Advisor">Advisor Name :</label>
                <input type="text" id="Advisor" name="Advisor" required />
            </div>
            <div>
                <label for="Payment">Payment Receipt :</label>
                <input type="file" id="Payment" name="Payment" accept=".pdf, .jpg, .jpeg, .png" required />
                <label id="Payment_Label" for="Payment">Add Payment Receipt</label> <!-- set payment file path(reciept) at payments table-->
            </div>
        </div>

        <p></p>
        <p style="line-height: 2.5;"><b>[ADD OR DROP SUBJECTS ACCORDINGLY]</b></p>
        <table id="ElecTable">
            <thead>
                <tr style="background-color:#42D0EF;">
                    <th>Course Code</th>
                    <th>Course</th>
                    <th>Course Co-ordinator</th>
                    <th>ADD or DROP</th>
                </tr>
            </thead>
            <tbody id="table-body">
                @foreach (DataRow row in page.displayCourses.Rows)
                {
                    <tr>
                        <td value="@row["id"]"> @row["course_code"]</td>
                        <td value="@row["id"]"> @row["course_name"]</td>
                        <td value="@row["id"]"> @row["acoordinator_email"]</td>
                        <td><button class="AddDrop" id="AddDrop_ELE1" onclick="toggleText(this)">Add</button></td>
                    </tr>
                }
            </tbody>
        </table>

        <button class="Confirm" type="submit">
            Confirm
        </button>
        <p style="margin-bottom:100px"></p>
    </div>
}



<style>
    h3 {
        text-align: center
    }

    .main-container {
        margin-left: 50px;
        margin-right: 50px
    }

    label {
        width: 270px;
        font-size: 20px;
    }

    input[type="text"] {
        width: 70%;
        height: 10%;
        border-radius: 5px;
    }

    input[type="checkbox"] {
        width: 20px;
        height: 20px;
        margin: 4px
    }

    input[type="file"] {
        height: 30px;
        border-radius: 5px;
    }

    #Payment {
        display: none
    }

    #Payment_Label {
        border: none;
        padding: 5px 10px;
        border-radius: 5px;
        background-color: rgba(0,0,0,0.25);
        width: auto;
        height: 30px;
        display: inline-flex;
        align-items: center;
    }

    .department-container {
        display: flex;
        justify-content: center;
    }

    select {
        background-color: rgba(141, 215, 225, 0.3);
        margin-left: 10px;
        border: none;
        outline: none;
        border-radius: 10px;
    }

    .Confirm {
        float: right;
        margin: 50px;
        width: 174px;
        height: 47px;
        border: none;
        border-radius: 10px;
        background-color: rgba(0,0,0,0.25)
    }

    table {
        width: 100%;
        display: none;
    }

    thead {
        height: 60px;
        font-size: 20px;
    }

    tbody {
        font-size: 20px;
    }

    th {
        text-align: center
    }

    td {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis
    }

        td:hover {
            overflow: visible;
            white-space: nowrap;
        }

    .AddDrop {
        text-align: center;
        float: none;
        width: auto;
        height: 32px;
        border: none;
        border-radius: 10px;
        background-color: rgba(0,0,0,0.25)
    }

    tr:nth-child(even) {
        background: #9ED8EA;
        text-align: center;
        height: 60px;
    }

    tr:nth-child(odd) {
        background: #7ED7D1;
        text-align: center;
        height: 60px;
    }
</style>

<script type="text/JavaScript">
    function showTable() {
        var department = document.getElementById("departmentSelect").value;

        var tables = document.querySelectorAll('table');
        tables.forEach(function (table) {
            table.style.display = 'none';
        });

        if (department) {
            document.getElementById(department).style.display = "table";
        }
    }

    function showAdvisorPayment() {
        var repeatCheckbox = document.getElementById("Repeat");
        var advisorPaymentBlock = document.getElementById("AdvisorPayment");

        if (repeatCheckbox.checked) {
            advisorPaymentBlock.style.display = "initial";
        } else {
            advisorPaymentBlock.style.display = "none";
        }
    }

    function toggleText(AddDropButton) {
        if (AddDropButton.textContent === "Add") {
            AddDropButton.textContent = "Drop";
        } else {
            AddDropButton.textContent = "Add";
        }
    }
</script>
@code {
    private StudentReg page;

    [Parameter]
    public string exam_id { get; set; }
    private ulong examId;

    [Parameter]
    public string student_id { get; set; }
    private ulong studentId;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            examId = 1;
            studentId = 1;
            page = new StudentReg(db);
            await page.init();
            await page.getStudent(studentId);
            await page.getCourses(examId);
            
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing page: {ex.Message}");
            Console.WriteLine(ex.StackTrace);
        }
    }
}
