@page "/student-home"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using ExamRegistrationUoJ.Services.DBInterfaces
@using System.Data
@using System.Security.Claims
@rendermode InteractiveServer
@attribute [Authorize(Policy = "IsStudent")]

@inject IDBServiceStudentHome db
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime

<PageTitle>Home - Student</PageTitle>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (!string.IsNullOrEmpty(error))
{
    <p class="error">@error</p>
}
else if (page == null || page.departments == null || page.semesters == null)
{
    <p>Loading...</p>
}
else
{
    <h1>
        <div class="title">Published Exams</div>
        <div class="subtitle">Find an exam by:</div>
    </h1>

    <!-- Filters container -->
    <section class="filter_container">
        <!-- Department filter -->
        <div class="filter-box">
            <div class="filter-header">Department</div>
            <div class="filter-content">
                <select @onchange="async (e) => { page.department = ((ChangeEventArgs)e).Value.ToString(); await FilterExams(); }" class="select-filter">
                    <option value=""> </option>
                    @foreach (DataRow row in page.departments.Rows)
                    {
                        <option value="@row["id"]">@row["name"]</option>
                    }
                </select>
            </div>
        </div>

        <!-- Semester filter -->
        <div class="filter-box">
            <div class="filter-header">Semester</div>
            <div class="filter-content">
                <select @onchange="async (e) => { page.semester = ((ChangeEventArgs)e).Value.ToString(); await FilterExams(); }" class="select-filter">
                    <option value=""> </option>
                    @foreach (DataRow row in page.semesters.Rows)
                    {
                        <option value="@row["id"]">@row["name"]</option>
                    }
                </select>
            </div>
        </div>

        <!-- Registration status filter -->
        <div class="filter-box">
            <div class="filter-header">Registration Status</div>
            <div class="filter-content">
                <select @onchange="async (e) => { page.status = ((ChangeEventArgs)e).Value.ToString(); await FilterExams(); }" class="select-filter">
                    <option value=""> </option>
                    <option value="Open">Open</option>
                    <option value="Closed">Closed</option>
                </select>
            </div>
        </div>
    </section>

    <!-- Relevant Exams -->
    @if (page.displayExams != null && page.displayExams.Rows.Count > 0)
    {
        <table>
            <thead>
                <tr>
                    <th>Exam Name</th>
                    <th>Semester</th>
                    <th>Batch</th>
                    <th>Registration Status</th>
                    <th>Courses</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (DataRow row in page.displayExams.Rows)
                {
                    <tr>
                        <td>@row["name"]</td>
                        <td>@row["semester"]</td>
                        <td>@row["batch"]</td>
                        <td>@row["registration_status"]</td>
                        <td>
                            @if (page.examCourses.ContainsKey((int)row["id"]))
                            {
                                <select class="select-exam">
                                    <option value="">-- Select Course --</option>
                                    @foreach (DataRow course in page.examCourses[(int)row["id"]].Rows)
                                    {
                                        <option value="@course["course_code"]">@course["course_name"]</option>
                                    }
                                </select>
                            }
                        </td>
                        <td>
                            <button @onclick="@(async () => await RegisterForExam((int)row["id"], (string)row["registration_status"]))">Register</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }

    <!-- Registered Exams Dropdown -->
    <div class="registered-exams">
        <h2>Your Registered Exams:</h2>
        <select class="select-exam">
            <option value="">-- Select Exam --</option>
            @foreach (DataRow row in page.registeredExams.Rows)
            {
                <option value="@row["id"]">@row["name"] - @row["semester"] @row["batch"]</option>
            }
        </select>
    </div>
}

@code {
    private StudentHomePage page;
    private int studentId;
    private bool isLoading = true;
    private string error;

    protected override async Task OnInitializedAsync()
    {
        await LoadInitialData();
    }

    private async Task LoadInitialData()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity.IsAuthenticated)
            {
                var emailClaim = user.Claims.FirstOrDefault(c => c.Type == "email" || c.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress");

                if (emailClaim != null)
                {
                    var email = emailClaim.Value;
                    var studentIdNullable = await db.getStudentIdByEmail(email);
                    if (studentIdNullable.HasValue)
                    {
                        studentId = studentIdNullable.Value;
                        page = new StudentHomePage(db, studentId);
                        await page.Init();
                        await FilterExams(); // Initial filter based on default values or no filters
                    }
                    else
                    {
                        throw new Exception("Student ID not found for the provided email.");
                    }
                }
                else
                {
                    throw new Exception("Email claim not found.");
                }
            }
            else
            {
                error = "User is not authenticated.";
            }
        }
        catch (Exception ex)
        {
            error = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task FilterExams()
    {
        try
        {
            int departmentId = string.IsNullOrEmpty(page.department) ? -1 : int.Parse(page.department);
            int semesterId = string.IsNullOrEmpty(page.semester) ? -1 : int.Parse(page.semester);

            if (page.status == "Open" || page.status == "Closed")
            {
                page.displayExams = await db.getFilteredExams(departmentId, semesterId, page.status == "Open" ? 1 : 0);

                // Load courses for each displayed exam
                foreach (DataRow row in page.displayExams.Rows)
                {
                    int examId = (int)row["id"];
                    page.examCourses[examId] = await db.getCoursesForExam(examId);
                }
            }
            else
            {
                // No specific status filter, load all exams
                page.displayExams = await db.getFilteredExams(departmentId, semesterId, -1); // -1 for all status

                // Load courses for each displayed exam
                foreach (DataRow row in page.displayExams.Rows)
                {
                    int examId = (int)row["id"];
                    page.examCourses[examId] = await db.getCoursesForExam(examId);
                }
            }

            StateHasChanged(); // Refresh UI after filtering
        }
        catch (Exception ex)
        {
            error = $"Failed to filter exams: {ex.Message}";
        }
    }

    private async Task RegisterForExam(int examId, string registrationStatus)
    {
        try
        {
            if (registrationStatus == "Open")
            {
                bool result = await page.registerForExam(examId);

                if (result)
                {
                    NavigationManager.NavigateTo("/student-register");
                }
                else
                {
                    error = "Failed to register for the exam.";
                }
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Registration is closed for this exam.");
            }
        }
        catch (Exception ex)
        {
            error = $"An error occurred: {ex.Message}";
        }
    }
}

<style>
    /* General styling */
    body {
        font-family: Inter, sans-serif;
        background-color: #f4f4f4;
        padding-top: 0px;
        margin: 0;
    }

    .title {
        width: 100%;
        color: black;
        font-size: 32px;
        font-family: Karma;
        font-weight: 700;
        word-wrap: break-word;
        padding-left: 5px;
    }

    .subtitle {
        width: 100%;
        color: #032826;
        font-size: 28px;
        font-family: Koh Santepheap;
        font-weight: 700;
        word-wrap: break-word;
        padding-left: 20px;
    }

    /* Container for filters */
    .filter_container {
        max-width: 1300px;
        justify-content: space-between;
        padding-left: 120px;
    }

    /* Filter box styling */
    .filter-box {
        width: calc(33.3% - 20px);
        background: rgba(141, 215, 225, 0.67);
        border-radius: 10px;
        padding: 10px;
        box-sizing: border-box;
        float: left;
        margin-right: 20px;
    }

    /* Clearfix */
    .filter_container::after {
        content: "";
        display: table;
        clear: both; /* Clear floats */
    }

    .filter-header {
        color: #14363A;
        font-size: 18px;
        font-family: Inter;
        font-weight: 700;
        margin-bottom: 5px;
    }

    .filter-content {
        display: flex;
        align-items: center;
    }

    /* Select filter styling */
    .select-filter {
        width: 100%;
        padding: 5px;
        border: none;
        border-radius: 5px;
        font-size: 18px;
        background-color: rgba(141, 215, 225, 0.67);
        color: #032826;
        font-family: Koh Santepheap;
    }

    /* Registration status container */
    .registration-status-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        background: rgba(141, 215, 225, 0.67);
        padding: 10px;
        border-radius: 10px;
        margin: 10px 0;
    }

    .registration-status-box {
        flex-grow: 1;
        color: #032826;
        font-size: 20px;
        font-family: Inter;
    }

    .register-button-container {
        display: flex;
        justify-content: flex-end;
    }

    .register-button {
        background-color: #032826;
        color: #f4f4f4;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        font-size: 16px;
        font-family: Inter;
        cursor: pointer;
    }

        .register-button:hover {
            background-color: #14363A;
        }

    /* Registered exams section */
    .registered-exams {
        font-size: 24px;
        font-family: Inter;
        font-weight: 700;
        color: #032826;
        margin-top: 20px;
    }

    .exam-details {
        margin-top: 10px;
    }

    .select-exam {
        width: 100%;
        padding: 5px;
        border: none;
        border-radius: 5px;
        font-size: 18px;
        background-color: rgba(141, 215, 225, 0.67);
        color: #032826;
        font-family: Koh Santepheap;
    }
</style>
