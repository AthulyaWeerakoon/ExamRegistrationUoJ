@page "/student-home"
@using Microsoft.AspNetCore.Authorization
@using ExamRegistrationUoJ.Services.DBInterfaces
@using StudentPages
@using System.Data
@rendermode InteractiveServer
@attribute [Authorize(Policy = "IsStudent")]

@inject IDBServiceStudentHome db
@inject NavigationManager NavigationManager

<PageTitle>Home - Student</PageTitle>

@if (page == null)
{
    <p>Loading...</p>
}
else if (page.departments == null || page.semesters == null)
{
    <p>Loading...</p>
}
else
{
    <h1>
        <div class="title">Published Exams</div>
        <div class="subtitle">Find an exam by:</div>
    </h1>

    <!-- Filters container -->
    <section class="filter_container">
        <!-- Department filter -->
        <div class="filter-box">
            <div class="filter-header">Department</div>
            <div class="filter-content">
                <select @onchange="async (e) => { page.departmentOpt = ((ChangeEventArgs)e).Value.ToString(); await page.filterExam(); StateHasChanged(); }" class="select-filter">
                    <option value=" "> </option>
                    @foreach (DataRow row in page.departments.Rows)
                    {
                        <option value="@row["id"]">@row["name"]</option>
                    }
                </select>
            </div>
        </div>

        <!-- Semester filter -->
        <div class="filter-box">
            <div class="filter-header">Semester</div>
            <div class="filter-content">
                <select @onchange="async (e) => { page.semesterOpt = ((ChangeEventArgs)e).Value.ToString(); await page.filterExam(); StateHasChanged(); }" class="select-filter">
                    <option value=" "> </option>
                    @foreach (DataRow row in page.semesters.Rows)
                    {
                        <option value="@row["id"]">@row["name"]</option>
                    }
                </select>
            </div>
        </div>
        <!-- Registration status filter -->
        <div class="filter-box">
            <div class="filter-header">Registration Status</div>
            <div class="filter-content">
                <select @onchange="async (e) => { page.statusOpt = ((ChangeEventArgs)e).Value.ToString(); await page.filterExam(); StateHasChanged(); }" class="select-filter">
                    <option value=" "> </option>
                    <option value="Open">Open</option>
                    <option value="Closed">Closed</option>
                </select>
            </div>
        </div>
    </section>

    <!-- Registration status containers -->
    @if (page.displayExams != null)
    {
        @foreach (DataRow row in page.displayExams.Rows)
        {
            <section class="registration-status-container">
                <div class="registration-status-box">
                    @row["name"]_@row["semester"]_@row["batch"] Registration Status: @row["registration_status"]
                </div>
                <div class="register-button-container">
                    <button class="register-button" @onclick="async () => await RegisterForExam(row)">Register</button>
                </div>
            </section>
        }
    }

    <!-- Your Registered Exams -->
    <div class="registered-exams">
        Your Registered Exams:
    </div>

    <!-- Exam details -->
    <div class="exam-details">
        <select class="select-exam">
            @foreach (DataRow row in page.registeredExams.Rows)
            {
                <option value="@row["id"]">@row["name"]_@row["semester"]_@row["batch"]</option>
            }
        </select>
    </div>
}

@code {
    private StudentHomePage page;

    protected override async Task OnInitializedAsync()
    {
        page = new StudentHomePage(db);
        await page.Init();
    }

    private async Task RegisterForExam(DataRow exam)
    {
        // Retrieve from authentication context
        string userName = "UserName";
        string userId = "UserId";
        uint examId = (uint)exam["id"];

        bool result = await page.RegisterForExam(userId, examId);

        if (result)
        {
            // Navigate to registration confirmation page or display confirmation message
            NavigationManager.NavigateTo($"/exam-registration-confirmation/{examId}");
        }

        else
        {
            // Handle registration failure (e.g., show an error message)
            // Implement appropriate logic for handling failure
        }
    }

    public class StudentHomePage
    {
        private readonly IDBServiceStudentHome db;

        public DataTable departments { get; private set; }
        public DataTable semesters { get; private set; }
        public DataTable displayExams { get; private set; }
        public DataTable registeredExams { get; private set; }

        public string departmentOpt { get; set; }
        public string semesterOpt { get; set; }
        public string statusOpt { get; set; }

        public StudentHomePage(IDBServiceStudentHome db)
        {
            this.db = db;
        }

        public async Task Init()
        {
            departments = await db.getDepartments();
            semesters = await db.getSemesters();
            displayExams = await db.getExams();
            registeredExams = await db.getRegisteredExams("UserId");
        }

        public async Task filterExam()
        {
            displayExams = await db.getFilteredExams(departmentOpt, semesterOpt, statusOpt);
        }

        public async Task<bool> RegisterForExam(string userId, uint examId)
        {
            return await db.registerForExam(userId, examId);
        }
    }
}
