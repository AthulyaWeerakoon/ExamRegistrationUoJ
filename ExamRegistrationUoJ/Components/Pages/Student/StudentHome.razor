@page "/student-home"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using ExamRegistrationUoJ.Services.DBInterfaces
@using System.Data
@using System.Security.Claims
@using StudentPages
@using System.Globalization
@rendermode InteractiveServer
@attribute [Authorize(Policy = "IsStudent")]

@inject IDBServiceStudentHome db
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Home - Student</PageTitle>



@if (isLoading)
{
    <Elements.LoadingPanel/>
}
else if (!string.IsNullOrEmpty(error))
{
    <p class="error">@error</p>
}
else if (page == null || page.departments == null || page.semesters == null)
{
    <Elements.LoadingPanel/>
}
else
{
    <Elements.AddressPath displayNames=displayNames linkingAddresses=addresses />
    <div class="content-container">
        <h1>
            <div class="title">Published Exams</div>
            <div class="subtitle">Find an exam by:</div>
        </h1>

        <!-- Filters container -->
        <section class="filter_container" style="padding-left: 15px; padding-right: 15px;">
            <!-- Department filter -->
            <div class="filter-box">
                <div class="filter-header">Department</div>
                <div class="filter-content">
                    <select disabled class="select-filter">
                        <option value="" hidden>Select...</option>
                        <option value="-1">All</option>
                        @foreach (DataRow row in page.departments.Rows)
                        {
                            <option value="@row["id"]">@row["name"]</option>
                        }
                    </select>
                </div>
            </div>

            <!-- Semester filter -->
            <div class="filter-box">
                <div class="filter-content">
                    <select @onchange="async (e) => { page.semester = ((ChangeEventArgs)e).Value.ToString(); await FilterExams(); }" class="select-filter">
                        <option selected disabled hidden>Semester</option>
                        <option value="-1">All</option>
                        @foreach (DataRow row in page.semesters.Rows)
                        {
                            <option value="@row["id"]">@row["name"]</option>
                        }
                    </select>
                </div>
            </div>

            <!-- Registration status filter -->
            <div class="filter-box">
                <div class="filter-header">Registration Status</div>
                <div class="filter-content">
                    <select disabled class="select-filter">
                        <option value="" hidden>Select...</option>
                        <option value="Open">Open</option>
                        <option value="Closed">Closed</option>
                    </select>
                </div>
            </div>
        </section>


        <!-- Relevant Exams -->
        @if (page.displayExams != null && page.displayExams.Rows.Count > 0)
        {
            @foreach (DataRow row in page.displayExams.Rows)
            {
                <div class="exam-container">
                    <div class="registration-status-box">
                        <h3 style="font-family: Inter; font-style: italic; font-weight: 600; font-size: 22px;">@row["name"] - @row["semester"] @row["batch"]</h3>
                        <div>Status: @row["registration_status"]</div>
                    </div>
                    <div class="button-container">
                        <button @onclick="@(async () => await registerForExam((int)row["id"], row["registration_status"].ToString()))" class="register-button">Register</button>
                        <img src="Assets/Images/arrow_icon.png" @onclick="@(async () => await ToggleCourses((int)row["id"]))" class="dropdown-icon" />
                    </div>
                </div>

                @if (page.showCoursesForExamId == (int)row["id"])
                {
                    <table class="courses-table">
                        <thead>
                            <tr>
                                <th>Course Code</th>
                                <th>Course Name</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (DataRow course in page.examCourses[(int)row["id"]].Rows)
                            {
                                <tr class="@(course.Table.Rows.IndexOf(course) % 2 == 0 ? "even" : "odd")">
                                    <td>@course["course_code"]</td>
                                    <td>@course["course_name"]</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            }
        }

        <!-- Registered Exams List as dropdowns -->
        <div class="registered-exams">
            <h2>Your Registered Exams:</h2>
            <ul class="registered-exams-list">
                @foreach (DataRow row in page.registeredExams.Rows)
                {
                    <li class="registered-exam-item">
                        <details>
                            <summary>
                                @row["name"] - @row["semester"] @row["batch"]
                                <img src="Assets/Images/arrow_icon.png" class="dropdown-icon" />
                            </summary>
                            <table class="courses-table">
                                <thead>
                                    <tr>
                                        <th>Course Code</th>
                                        <th>Course Name</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (DataRow course in page.examCourses[Convert.ToInt32(row["id"])].Rows)
                                    {
                                        <tr class="@(course.Table.Rows.IndexOf(course) % 2 == 0 ? "even" : "odd")">
                                            <td>@course["course_code"]</td>
                                            <td>@course["course_name"]</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </details>
                    </li>
                }
            </ul>
        </div>

        <!-- Display a message for closed registration -->
        @if (!string.IsNullOrEmpty(closedRegistrationMessage))
        {
            <div class="alert alert-warning" role="alert">
                @closedRegistrationMessage
            </div>
        }
    </div>
}

@code {
    private StudentHomePage page;
    private int studentId;
    private bool isLoading = true;
    private string error;
    private string closedRegistrationMessage;

    // For addresses
    private List<string?> addresses = new List<string?> { null };
    private List<string> displayNames = new List<string> { "Student Home"};

    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var queryParams = System.Web.HttpUtility.ParseQueryString(uri.Query);

        if (int.TryParse(queryParams["studentId"], out int studentIdParam))
        {
            studentId = studentIdParam;
        }

        await LoadInitialData();
    }

    private async Task LoadInitialData()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity.IsAuthenticated)
            {
                var emailClaim = user.Claims.FirstOrDefault(c => c.Type == "email" || c.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress");

                if (emailClaim != null)
                {
                    var email = emailClaim.Value;
                    var studentIdNullable = await db.getStudentIdByEmail(email);
                    if (studentIdNullable.HasValue)
                    {
                        studentId = studentIdNullable.Value;
                        page = new StudentHomePage(db, studentId);
                        await page.Init();
                        await LoadRegisteredExams(); // Load registered exams after initializing the page
                    }
                    else
                    {
                        throw new Exception("Student ID not found for the provided email.");
                    }
                }
                else
                {
                    throw new Exception("Email claim not found.");
                }
            }
            else
            {
                throw new Exception("User is not authenticated.");
            }
        }
        catch (Exception ex)
        {
            error = $"Failed to load initial data: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadRegisteredExams()
    {
        try
        {
            page.registeredExams = await db.getRegisteredExams(studentId);

            foreach (DataRow row in page.registeredExams.Rows)
            {
                int examId = Convert.ToInt32(row["id"]);
                page.examCourses[examId] = await db.getCoursesForExam(examId);
            }
        }
        catch (Exception ex)
        {
            error = $"Failed to load registered exams: {ex.Message}";
        }
    }


    private async Task FilterExams()
    {
        try
        {
            int departmentId = -1; // Default value for disabled filter
            int semesterId = page.semester != null && page.semester != "" ? int.Parse(page.semester) : -1;
            int status = -1; // Default value for disabled filter

            page.displayExams = await db.getFilteredExams(semesterId);

            // Load courses for each exam
            foreach (DataRow row in page.displayExams.Rows)
            {
                int examId = (int)row["id"];
                page.examCourses[examId] = await db.getCoursesForExam(examId);
            }
        }
        catch (Exception ex)
        {
            error = $"Failed to filter exams: {ex.Message}";
        }
    }



    private async Task registerForExam(int examId, string registrationStatus)
    {
        try
        {
            var targetUrl = $"/student-register/{examId}";

            // Navigate to the target URL
            NavigationManager.NavigateTo(targetUrl, false);

        }
        catch (Exception ex)
        {
            error = $"Failed to register for exam: {ex.Message}";
        }
    }


    private async Task ToggleCourses(int examId)
    {
        if (page.showCoursesForExamId == examId)
        {
            page.showCoursesForExamId = 0;
        }
        else
        {
            page.showCoursesForExamId = examId;
        }
    }
}
