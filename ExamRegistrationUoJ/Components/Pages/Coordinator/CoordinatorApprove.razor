@page "/coordinator-approve"
@using Microsoft.AspNetCore.Authorization
@using ExamRegistrationUoJ.Services
@using ExamRegistrationUoJ.Services.DBInterfaces
@using CoordinatorPages
@using System.Data
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@rendermode InteractiveServer
@using System.Text.RegularExpressions
@using Newtonsoft.Json
@inject NavigationManager NavigationManager
@attribute [Authorize(Policy = "IsCoordinator")]
@using System.Globalization

@inject IDBServiceCoordinator1 db
@inject IHttpContextAccessor contextAccessor
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Student Approval</PageTitle>

<Elements.AddressPath displayNames=displayNames linkingAddresses=addresses />

<div class="coordinator">
   
    <section>
        <div class="student-approval-text">Approve Eligible Students For</div>
    </section>

    <section class="course-details">
        <div class="course-code">
            <div class="course-code-text">Course Code &nbsp; :</div>
            <div class="course-code-auto">@courseCode</div>
        </div>
        <div class="course-name">
            <div class="course-name-text">Course Name :</div>
            <div class="course-name-auto">@coursename</div>
        </div>
    </section>

    @if (IsDeadlinePassed())
    {
        <DialogBoxes.DialogOptions Title="Deadline Passed" Message="Approval status for this exam can no longer be adjusted" Opened=deadLinePassedMsg ClosedCallback="() => { deadLinePassedMsg = false; StateHasChanged(); }" />
    }

    <section class="student-table">
        <table class="table">
            <thead>
                <tr>
                    <th>E Number</th>
                    <th>Student Name</th>
                    <th>Student Advisor</th>
                    <th>Eligibility</th>
                    <th>Attendance %</th>
                </tr>
            </thead>
            <tbody>
                @if (Exam_student_details != null)
                {
                    foreach (DataRow row in Exam_student_details.Rows)
                    {
                        <tr>
                            <td data-label="E Number">@RemoveDomainFromEmail(row["student_email"]?.ToString())</td>
                            <td data-label="Student Name">@row["student_name"]?.ToString()</td>
                            <td data-label="Student Advisor">@row["advisor_name"]?.ToString()</td>
                            <td data-label="Eligibility">
                                <div class="eligibility">
                                    @if (!IsDeadlinePassed())
                                    {
                                        @if (row["is_approved"] != DBNull.Value)
                                        {
                                            @if (Convert.ToInt32(row["is_approved"]) == 1)
                                            {
                                                <img src="Assets/Images/Done.png" class="Done clicked" style="width: 36px; height: 33px;" @ref=@row["done_button"] @onclick="async ()=>{ await OnApprovalClick(row,  true); }" />
                                                <img src="Assets/Images/Close.png" class="Close" style="width: 36px; height: 33px;" @ref=@row["close_button"] @onclick="async ()=>{ await OnApprovalClick(row,  false); }" />
                                            }
                                            else if (Convert.ToInt32(row["is_approved"]) == 2)
                                            {
                                                <img src="Assets/Images/Done.png" class="Done" style="width: 36px; height: 33px;" @ref=@row["done_button"] @onclick="async ()=>{ await OnApprovalClick(row,  true); }" />
                                                <img src="Assets/Images/Close.png" class="Close clicked" style="width: 36px; height: 33px;" @ref=@row["close_button"] @onclick="async ()=>{ await OnApprovalClick(row,  false); }" />
                                            }
                                            else
                                            {
                                                <img src="Assets/Images/Done.png" class="Done" style="width: 36px; height: 33px;" @ref=@row["done_button"] @onclick="async ()=>{ await OnApprovalClick(row,  true); }" />
                                                <img src="Assets/Images/Close.png" class="Close" style="width: 36px; height: 33px;" @ref=@row["close_button"] @onclick="async ()=>{ await OnApprovalClick(row,  false); }" />
                                            }
                                        }
                                        else
                                        {
                                            <img src="Assets/Images/Done.png" class="Done" style="width: 36px; height: 33px;" @ref=@row["done_button"] @onclick="async ()=>{ await OnApprovalClick(row,  true); }" />
                                            <img src="Assets/Images/Close.png" class="Close" style="width: 36px; height: 33px;" @ref=@row["close_button"] @onclick="async ()=>{ await OnApprovalClick(row,  false); }" />
                                        }
                                    }
                                    else
                                    {
                                        @if (row["is_approved"] != DBNull.Value)
                                        {
                                            @if (Convert.ToInt32(row["is_approved"]) == 1)
                                            {
                                                <img src="Assets/Images/Done.png" class="Done clicked" style="width: 36px; height: 33px;" @ref=@row["done_button"] />
                                                <img src="Assets/Images/Close.png" class="Close" style="width: 36px; height: 33px;" @ref=@row["close_button"] />
                                            }
                                            else if (Convert.ToInt32(row["is_approved"]) == 2)
                                            {
                                                <img src="Assets/Images/Done.png" class="Done" style="width: 36px; height: 33px;" @ref=@row["done_button"] />
                                                <img src="Assets/Images/Close.png" class="Close clicked" style="width: 36px; height: 33px;" @ref=@row["close_button"] />
                                            }
                                            else
                                            {
                                                <img src="Assets/Images/Done.png" class="Done" style="width: 36px; height: 33px;" @ref=@row["done_button"] />
                                                <img src="Assets/Images/Close.png" class="Close" style="width: 36px; height: 33px;" @ref=@row["close_button"] />
                                            }
                                        }
                                        else
                                        {
                                            <img src="Assets/Images/Done.png" class="Done" style="width: 36px; height: 33px;" @ref=@row["done_button"] />
                                            <img src="Assets/Images/Close.png" class="Close" style="width: 36px; height: 33px;" @ref=@row["close_button"] />
                                        }
                                    }
                                </div>
                            </td>
                            <td data-label="Attendance" class="attendance">
                                @if (!IsDeadlinePassed())
                                {
                                    @if (row["attendance"] != DBNull.Value)
                                    {
                                        <input type="number" min="0" max="100" class="coordinator-input" id="cordInput" placeholder="Enter the Attendance" value="@row["attendance"]" oninput="validateAttendanceInput(this)" @onchange="@(async (e) => { row["attendance"] = ((ChangeEventArgs)e).Value.ToString(); })" readonly
                                               onfocus="this.removeAttribute('readonly');"
                                               onblur="this.setAttribute('readonly', 'readonly');" onkeydown="return restrictInput(event);" />
                                    }
                                    else
                                    {
                                        <input type="number" min="0" max="100" class="coordinator-input" id="cordInput" placeholder="Enter the Attendance" value="@row["attendance"]" oninput="validateAttendanceInput(this)" @onchange="@(async (e) => { row["attendance"] = ((ChangeEventArgs)e).Value.ToString(); })" readonly
                                               onfocus="this.removeAttribute('readonly');"
                                               onblur="this.setAttribute('readonly', 'readonly');" onkeydown="return restrictInput(event);" />
                                    }
                                }
                                else
                                {
                                    <input value="@row["attendance"]" readonly />
                                }
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="5">No data available.</td>
                    </tr>
                }
            </tbody>
        </table>
    </section>

    @if (!IsDeadlinePassed())
    {
        <section class="conform-btns">
            <a class="conform-btn" @onclick="async () => { await UpdateData(); }">
                <div class="conform-img"><img src="Assets/Images/Checked_Checkbox.png" /></div>
                <div class="conform-text">Confirm</div>
            </a>
            <a class="import-btn" @onclick="() => { csvUploading = true; StateHasChanged(); }">
                <div class="import-img"><img src="Assets/Images/upload.png" /></div>
                <div class="import-text">Import as CSV</div>
            </a>
            <a class="export-btn" @onclick="() => downloadCSV()">
                <div class="export-img"><img src="Assets/Images/download.png" /></div>
                <div class="export-text">Export as CSV</div>
            </a>
            
        </section>
    }
    else
    {
        <section class="conform-btns">
            <a class="export-btn" @onclick="() => downloadCSV()">
                <div class="export-img"><img src="Assets/Images/download.png" /></div>
                <div class="export-text">Export as CSV</div>
            </a>

        </section>
    }
</div>

@if (faiureDialog)
{
    <DialogBoxes.DialogOptions Opened="true" Title="Task Successful" Message="The Records Were Successfully Saved" ClosedCallback="() => { faiureDialog = false; StateHasChanged(); }" />
}


@if (blocked)
{
    <Elements.LoadingPanel />
}

<DialogBoxes.FileUploadDialogOptions Title="Upload CSV" Message="Upload csv with relevant course approval details" Opened=csvUploading UploadCallBack="async (file) => { if(file is not null) await upoadCSV(file); }" ClosedCallback="() => { csvUploading = false; StateHasChanged(); }"/>


@if (blocking)
{
    <Elements.LoadingPanel />
}

<script>
    window.downloadFileFromStream = async (fileName, contentStreamReference) => {
        const arrayBuffer = await contentStreamReference.arrayBuffer();
        const blob = new Blob([arrayBuffer]);
        const url = URL.createObjectURL(blob);
        const anchorElement = document.createElement('a');
        anchorElement.href = url;
        anchorElement.download = fileName ?? '';
        anchorElement.click();
        anchorElement.remove();
        URL.revokeObjectURL(url);
    }

    function show_hide_icon(clickedIcon) {
        var parentDiv = clickedIcon.parentNode;
        var doneIcon = parentDiv.querySelector('.Done');
        var closeIcon = parentDiv.querySelector('.Close');
        const currentDate = new Date();

        if (clickedIcon === doneIcon) {
            doneIcon.classList.toggle('clicked');
            closeIcon.classList.remove('clicked');
        } else if (clickedIcon === closeIcon) {
            closeIcon.classList.toggle('clicked');
            doneIcon.classList.remove('clicked');
        }
    }
    function validateAttendanceInput(input) {
        if (input.value === '') {
            input.value = 0;
        } else if (input.value < 0) {
            input.value = 0;
        } else if (input.value > 100) {
            input.value = 100;
        }
    }

    function restrictInput(event) {
        const input = event.target;
        const key = event.key;

        const allowedKeys = ['Backspace', 'ArrowLeft', 'ArrowRight', 'Tab', 'Delete'];
        if (allowedKeys.includes(key)) {
            return true;
        }

        const newValue = input.value + key;

        if (isNaN(newValue) || newValue < 0 || newValue > 100) {
            event.preventDefault();
            return false;
        }

        return true;
    }

    const attendanceInput = document.getElementById('attendanceInput');

    attendanceInput.addEventListener('input', function () {
        validateAttendanceInput(attendanceInput);
    });

    attendanceInput.addEventListener('keydown', restrictInput);

</script>

@code {
    [Inject]
    IJSRuntime jSRuntime { get; set; }

    private bool blocking = false;

    private bool deadLinePassedMsg = true;
    private bool csvUploading = false;

    private CoApproval page;
    private string? Exam_id;
    private DataTable? Exam_student_details;
    private int Exam_id_number;
    private string? courseCode;
    private string? coursename;
    private DataTable? enddate;
    private string approve_closedate;
    private DataTable? student_registration_data;
    private bool blocked = false;
    private bool faiureDialog = false;

    private CSVClass csvclass;

    private List<string?> addresses = new List<string?> { "coordinator-home",null };
    private List<string> displayNames = new List<string> { "Coordinator Home", "Coordinator Approval" };

    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var queryParams = System.Web.HttpUtility.ParseQueryString(uri.Query);

        Exam_id = queryParams["exam_id"];
        Exam_id_number = Convert.ToInt32(Exam_id);
        courseCode = queryParams["courseCode"];

        csvclass = new CSVClass(contextAccessor);
    }

    protected override async Task OnInitializedAsync()
    {
        await initialize();
    }

    private async Task initialize()
    {
        blocked = true;
        page = new CoApproval(db);
        Exam_student_details = await db.getExamDetails_student(Exam_id_number, courseCode, await GetUserEmailAsync());
        Exam_student_details.Columns.Add("done_button", typeof(ElementReference));
        Exam_student_details.Columns.Add("close_button", typeof(ElementReference));
        coursename = await db.get_coursecode(courseCode);
        enddate = await db.get_enddate(Exam_id_number);
        approve_closedate = await GetFormattedEndDateAsync(Exam_id_number);
        blocked = false;
    }

    private async Task<string> GetUserEmailAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        return user.FindFirst(ClaimTypes.Email)?.Value ?? "Unknown";
    }

    private async Task downloadCSV()
    {
        ToggleBlocking();
        if(Exam_student_details is not null && Exam_id is not null && courseCode is not null){
            // create new modified table for export
            DataTable transformedTable = new DataTable();
            transformedTable.Columns.Add("id", typeof(int));
            transformedTable.Columns.Add("student_id", typeof(int));
            transformedTable.Columns.Add("advisor_id", typeof(int));
            transformedTable.Columns.Add("student_e_num", typeof(string));
            transformedTable.Columns.Add("student_name", typeof(string));
            transformedTable.Columns.Add("advisor_name", typeof(string));
            transformedTable.Columns.Add("is_approved", typeof(bool));
            transformedTable.Columns.Add("attendance", typeof(int));

            // iterate through the original DataTable rows
            foreach (DataRow row in Exam_student_details.Rows)
            {
                // extract the student email and transform it
                string studentEmail = row["student_email"].ToString();
                string studentENum = studentEmail.Split('@')[0].ToUpper();

                // add a new row to the transformed DataTable
                transformedTable.Rows.Add(
                    row["id"],
                    row["student_id"],
                    row["advisor_id"],
                    studentENum,
                    row["student_name"],
                    row["advisor_name"],
                    (row["is_approved"] is null) ? DBNull.Value : ((Convert.ToInt32(row["is_approved"]) == 0) ? DBNull.Value : ((Convert.ToInt32(row["is_approved"]) == 1) ? true : false)),
                    row["attendance"]
                );
            }

            var keyValPair = csvclass.exportAsCSV(transformedTable, courseCode, Exam_id);
            string fileName = keyValPair.Key;
            DotNetStreamReference streamRef = keyValPair.Value;
            await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
            streamRef.Dispose();
            ToggleBlocking();
        }
    }

    private async Task upoadCSV(IBrowserFile file)
    {
        ToggleBlocking();
        DataTable? tableFromCSV = await csvclass.importAsDataTable(file);

        if (tableFromCSV is not null)
        {
            PrintDataTable(tableFromCSV);
            await db.ExecuteCSVUpdateAsync(tableFromCSV, Exam_id, await GetUserEmailAsync());
        }
        await initialize();
        ToggleBlocking();
    }

    public static void PrintDataTable(DataTable dataTable)
    {
        // Calculate column widths
        int[] columnWidths = new int[dataTable.Columns.Count];
        for (int i = 0; i < dataTable.Columns.Count; i++)
        {
            columnWidths[i] = dataTable.Columns[i].ColumnName.Length;
            foreach (DataRow row in dataTable.Rows)
            {
                int length = row[i].ToString().Length;
                if (length > columnWidths[i])
                {
                    columnWidths[i] = length;
                }
            }
        }

        // Print column headers
        for (int i = 0; i < dataTable.Columns.Count; i++)
        {
            Console.Write(dataTable.Columns[i].ColumnName.PadRight(columnWidths[i] + 2));
        }
        Console.WriteLine();

        // Print separator line
        for (int i = 0; i < dataTable.Columns.Count; i++)
        {
            Console.Write(new string('-', columnWidths[i] + 2));
        }
        Console.WriteLine();

        // Print rows
        foreach (DataRow row in dataTable.Rows)
        {
            for (int i = 0; i < dataTable.Columns.Count; i++)
            {
                Console.Write(row[i].ToString().PadRight(columnWidths[i] + 2));
            }
            Console.WriteLine();
        }
    }

    private async Task<string> GetFormattedEndDateAsync(int examIdNumber)
    {
        DataTable examData = await db.get_enddate(examIdNumber);

        if (examData.Rows.Count > 0)
        {
            DataRow row = examData.Rows[0];
            DateTime endDate = Convert.ToDateTime(row["end_date"]);
            int coordinatorApprovalExtension = Convert.ToInt32(row["coordinator_approval_extension"]);
            DateTime finalDate = endDate.AddDays(coordinatorApprovalExtension * 7);
            string formattedDate = finalDate.ToString("dd/MM/yyyy");
            return formattedDate;
        }
        else
        {
            throw new Exception("No data found for the given exam ID.");
        }
    }

    private string RemoveDomainFromEmail(string? email)
    {
        if (string.IsNullOrWhiteSpace(email))
        {
            return string.Empty;
        }

        var atIndex = email.IndexOf('@');
        return atIndex > 0 ? email.Substring(0, atIndex) : email;
    }

    private async Task OnApprovalClick(DataRow row, bool is_it_is_done_button)
    {
        if (is_it_is_done_button)
        {
            if (Convert.ToString(row["is_approved"]) == "1")
            {
                row["is_approved"] = "0";
            }
            else
            {
                row["is_approved"] = "1";
            }
        }
        else
        {
            if (Convert.ToString(row["is_approved"]) == "2")
            {
                row["is_approved"] = "0";
            }
            else
            {
                row["is_approved"] = "2";
            }
        }

        await jSRuntime.InvokeVoidAsync("show_hide_icon", (is_it_is_done_button) ? row["done_button"] : row["close_button"]);
    }

    private async Task UpdateData()
    {
        blocked = true;
        StateHasChanged();
        DataTable updateParameter = new DataTable();
        updateParameter.Columns.Add("exam_student_id", typeof(uint));
        updateParameter.Columns.Add("is_approved", typeof(uint));
        updateParameter.Columns.Add("attendance", typeof(uint));

        if (Exam_student_details == null)
        {
            blocked = false;
            StateHasChanged();
            return;
        }

        foreach (DataRow row in Exam_student_details.Rows)
        {
            DataRow add_row = updateParameter.NewRow();
            add_row["exam_student_id"] = row["exam_student_id"];
            add_row["is_approved"] = row["is_approved"];
            add_row["attendance"] = row["attendance"];
            updateParameter.Rows.Add(add_row);
        }

        await db.save_change_coordinator_aproval(Convert.ToInt32(Exam_student_details.Rows[0]["exam_course_id"]), updateParameter);
        blocked = false;
        faiureDialog = true;
        StateHasChanged();
    }

    public bool IsDeadlinePassed()
    {
        string deadlineDateString = approve_closedate?.Trim();
        if (!string.IsNullOrEmpty(deadlineDateString))
        {
            DateTime deadlineDate;
            if (DateTime.TryParseExact(deadlineDateString, "dd/MM/yyyy", CultureInfo.InvariantCulture, DateTimeStyles.None, out deadlineDate))
            {
                if (DateTime.Today == deadlineDate)
                {
                    return false;
                }
                else
                {
                    return DateTime.Today > deadlineDate;
                }
            }
            else
            {
                return false;
            }
        }

        return false;
    }

    private void ToggleBlocking()
    {
        blocking = (blocking) ? false : true;
        StateHasChanged();
    }
}
