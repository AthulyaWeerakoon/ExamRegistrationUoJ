@page "/coordinator-home"
@using Microsoft.AspNetCore.Authorization
@using ExamRegistrationUoJ.Services.DBInterfaces
@using CoordinatorPages
@using System.Data
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@rendermode InteractiveServer
@attribute [Authorize(Policy = "IsCoordinator")]

@inject IDBServiceCoordinator1 db
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Home - Coordinator</PageTitle>
@if (page == null)
{
    <Elements.LoadingPanel />
}
else if (page.departments == null || page.semesters == null)
{
    <Elements.LoadingPanel />
}
else
{
    <div class="coordinator">
        <section class="coordinator-path">
            <div class="path">Coordinator login &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp; Coordinator home</div>
        </section>

        <section class="coordinator-exam-text">
            <div class="coordinator-approval-text">Directed Examinations for Coordinator Approval Process</div>
            <div class="coordinator-exam-find-text">Find an exam by</div>
        </section>

        <section class="coordinator-dropbox">
            <div class="dropbox">
                <select class="department" @onchange="async (e) => { page.departmentOpt = ((ChangeEventArgs)e).Value.ToString();ExamDetails_coordinator= await page.filter_exam(userEmail); }">
                    <option selected disabled hidden>Department</option>
                    @foreach (DataRow row in page.departments.Rows)
                    {
                        <option value="@row["id"]">@row["name"]</option>
                    }
                    <option>All</option>
                </select>
                <select class="semester" @onchange="async (e) => { page.semesterOpt = ((ChangeEventArgs)e).Value.ToString(); ExamDetails_coordinator= await page.filter_exam(userEmail); }">
                    <option selected disabled hidden>Semester</option>
                    @foreach (DataRow row in page.semesters.Rows)
                    {
                        <option value="@row["id"]">@row["name"]</option>
                    }
                    <option>All</option>
                </select>
            </div>
        </section>

        <div class="details">
            <section class="coordinator-exam-details">
                <div class="exam-details">
                    @if (ExamDetails_coordinator != null && ExamDetails_coordinator.Rows.Count > 0)
                    {
                        @foreach (DataRow row in ExamDept_coordinator.Rows)
                        {
                            <div class="exam">
                                <div class="exam-description">@row["name"]</div>
                                <div class="exam-batch-data">
                                    <p class="exam-approval">Approval Opens: @(((DateTime)row["end_date"]).Date.ToShortDateString())</p>
                                    <p class="exam-closed">Closed: @(CombineDates(row["end_date"], row["coordinator_approval_extension"]))</p>
                                </div>
                            </div>
                            <div class="view">
                                <button class="btn" onclick="toggleVisibility('@row["exam_id"]')" id="toggle-btn-@row["exam_id"]">View</button>
                            </div>
                            <div class="coordinator-table" style="display: none;" id="show-table-@row["exam_id"]">
                                <table class="table">
                                    <thead>
                                        <tr>
                                            <th>Semester</th>
                                            <th>Department</th>
                                            <th>Course Code</th>
                                            <th>Course Name</th>
                                            <th>Approval States</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @{
                                            bool hasRows = false;
                                            foreach (DataRow row1 in ExamDetails_coordinator.Rows) // Corrected ExamDetails_coordinator to ExamDept_coordinator
                                            {
                                                if (row1["exam_id"].ToString() == row["exam_id"].ToString())
                                                {
                                                    hasRows = true;
                                                    <tr>
                                                        <td data-label="Semester">@row1["semester_id"]</td>
                                                        <td data-label="Department">@row1["department_name"]</td>
                                                        <td data-label="Course Code">@row1["code"]</td>
                                                        <td data-label="Course Name">@row1["course_name"]</td>
                                                        <td data-label="Approval States" >
                                                            @foreach (DataRow row2 in count_is_approve.Rows)
                                                            {
                                                                @if (row2["exam_id"].ToString() == row1["exam_id"].ToString() && row2["code"].ToString() == row1["code"].ToString())
                                                                {
                                                                    <a href="/coordinator-approve?exam_Id=@row["exam_id"]&courseCode=@row1["code"]" class="approval-states">
                                                                        @if (row2["number_of_null_columns"].ToString() == "0"  )
                                                                        {
                                                                            @if (row2["is_approved"].ToString() != "0")
                                                                            {
                                                                                <div class="approval-states-text">Complete</div>
                                                                            }
                                                                            else
                                                                            {
                                                                                <div class="approval-states-text">Not Complete</div>
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            <div class="approval-states-text">Not Complete</div>
                                                                        }

                                                                    </a>
                                                                }
                                                                
                                                            }
                                                            



                                                        </td>
                                                    </tr>
                                                }
                                            }

                                            if (!hasRows)
                                            {
                                                <tr>
                                                    <td colspan="5">
                                                        <h1>No exam details found for the coordinator.</h1>
                                                    </td>
                                                </tr>
                                            }
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                    }
                    else
                    {
                        <h1>No exam details found for the coordinator.</h1>
                    }


                </div>
            </section>
        </div>
    </div>
}

<script>
    function toggleVisibility(examId) {
        var table = document.getElementById("show-table-" + examId);
        var button = document.getElementById("toggle-btn-" + examId);

        if (table.style.display === "none") {
            table.style.display = "block";
            button.textContent = "Hide";
        } else {
            table.style.display = "none";
            button.textContent = "View";
        }
    }
</script>

@code {
    private CoHome page;
    private string userEmail;
    private int coordinatorID;
    private DataTable ExamDept_coordinator;
    private DataTable ExamDetails_coordinator;
    private DataTable count_is_approve;


    int examIdInt;
    uint examIdUInt;
    string course_Code;

    protected override async Task OnInitializedAsync()
    {
        page = new CoHome(db);
        await page.init();
        userEmail = await GetUserEmailAsync();
        coordinatorID = await db.getCoordinatorID(userEmail);
        ExamDept_coordinator = await db.getExamDept_coordinator(userEmail);
        ExamDetails_coordinator = await db.getExamDetails_coordinator(userEmail);
        count_is_approve = await db.is_confrom_exam_count(userEmail);
    }

    private async Task<string> GetUserEmailAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        return user.FindFirst(ClaimTypes.Email)?.Value ?? "Unknown";
    }

    private string CombineDates(object endDateObj, object approvalExtensionObj)
    {
        if (endDateObj != null && approvalExtensionObj != null)
        {
            DateTime endDate = (DateTime)endDateObj;
            int approvalExtensionWeeks = Convert.ToInt32(approvalExtensionObj);

            // Add the number of weeks to the end_date
            DateTime combinedDate = endDate.AddDays(approvalExtensionWeeks * 7);

            return combinedDate.ToShortDateString(); // Format as short date string
        }
        else
        {
            return "N/A";
        }
    }

    
    }
}
