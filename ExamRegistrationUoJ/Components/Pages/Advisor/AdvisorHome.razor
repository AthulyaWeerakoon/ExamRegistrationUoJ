@page "/advisor-home"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components
@using ExamRegistrationUoJ.Services.DBInterfaces
@using System.Data
@using System.Security.Claims
@using System.Globalization
@rendermode InteractiveServer
@using AdvisorPages
@inject IDBServiceAdvisorHome db
@inject NavigationManager Navigation

@attribute [Authorize(Policy = "IsAdvisor")]

<PageTitle>Advisor - Home</PageTitle>

<Elements.AddressPath displayNames=displayNames linkingAddresses=addresses />

<section>
    <div class="exam-title">Directed Examinations for Advisor Approval Process</div>
    <div class="find-exam">Find an exam by:</div>
</section>

<section class="advisor-dropbox">
    <div class="dropbox">
        <select class="semester" @onchange="async (e) => { selectedSemester = ((ChangeEventArgs)e).Value?.ToString(); await LoadExams(); }">
            <option value="" selected disabled hidden>Semester</option>
            @if (semesters != null)
            {
                @foreach (DataRow semester in semesters.Rows)
                {
                    <option value="@semester["id"]">@semester["name"]</option>
                }
            }
            <option value="All">All</option>
        </select>
    </div>
</section>

@if (isLoading)
{
    <Elements.LoadingPanel/>
}
else if (!string.IsNullOrEmpty(error))
{
    <p class="error">@error</p>
}
else if (filteredExams != null && filteredExams.Rows.Count > 0)
{
    <ul class="exam-list">
        @foreach (DataRow exam in filteredExams.Rows)
        {
            var examId = Convert.ToInt32(exam["id"]);
            <div class="exam-details">
                <div class="exam">
                    <div class="exam-description">@exam["description"]</div>
                    <div class="exam-batch-data">
                        <p class="exam-approval">Approval Opened: @Convert.ToDateTime(exam["approval_opens"]).ToString("dd-MM-yyyy")</p>
                        <p class="exam-closed">Approval Closes: @Convert.ToDateTime(exam["advisor_approval_close"]).ToString("dd-MM-yyyy")</p>
                    </div>
                </div>
                <div class="view">
                    <button @onclick="() => NavigateToExamView(examId)" style="padding-top: 30px; padding-right: 60px; padding-bottom: 30px; padding-left: 60px;">View</button>
                </div>
            </div>
        }
    </ul>
}
else
{
    <DialogBoxes.DialogOptions Title="No Exams" Message="There are no exams with registered students pending your approval" ClosedCallback="()=>{ noExamError = false; StateHasChanged(); }"/>
}

@code {
    private DataTable semesters;
    private DataTable allExams;
    private DataTable filteredExams;
    private bool isLoading = true;
    private string error;
    private string selectedSemester = "All";

    // For addresses
    private List<string?> addresses = new List<string?> { null };
    private List<string> displayNames = new List<string> { "Advisor Home" };

    // No exam found error
    private bool noExamError = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadInitialData();
    }

    private async Task LoadInitialData()
    {
        try
        {
            isLoading = true;
            semesters = await db.getSemesters();
            if (semesters == null)
            {
                throw new Exception("Failed to load semesters");
            }

            await LoadExams();
        }
        catch (Exception ex)
        {
            error = $"An error occurred while loading data: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadExams()
    {
        try
        {
            isLoading = true;
            error = null;
            allExams = await db.getAllExamForAdvisorApproval();
            FilterExams();
        }
        catch (Exception ex)
        {
            error = $"An error occurred while loading exams: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void FilterExams()
    {
        if (allExams == null)
        {
            filteredExams = null;
            return;
        }

        if (selectedSemester == "All" || string.IsNullOrEmpty(selectedSemester))
        {
            filteredExams = allExams;
        }
        else
        {
            try
            {
                uint selectedSemesterId = uint.Parse(selectedSemester);
                Console.WriteLine(selectedSemesterId);
                var filteredRows = allExams.AsEnumerable()
                    .Where(row => row.Field<uint>("semester_id") == selectedSemesterId)
                    .ToList();

                filteredExams = filteredRows.Any() ? filteredRows.CopyToDataTable() : allExams.Clone();
            }
            catch (Exception ex)
            {
                error = $"An error occurred while filtering exams: {ex.Message}";
                filteredExams = allExams.Clone();
            }
        }
    }

    private void NavigateToExamView(int examId)
    {
        Navigation.NavigateTo($"/advisor-view-exam/{examId}");
    }
}
