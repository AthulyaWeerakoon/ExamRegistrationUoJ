@page "/advisor-home"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components
@using ExamRegistrationUoJ.Services.DBInterfaces
@using System.Data
@using System.Security.Claims
@using System.Globalization
@rendermode InteractiveServer
@using AdvisorPages
@inject IDBServiceAdvisorHome db
@inject NavigationManager Navigation

@attribute [Authorize(Policy = "IsAdvisor")]

<PageTitle>Advisor - Home</PageTitle>

<section class="advisor-path">
    <div class="path"><a href="/advisor-coordinator-home">Advisor login</a> &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp; <a href="/advisor-home">Advisor home</a></div>
</section>

<section>
    <div class="exam-title">Directed Examinations for Advisor Approval Process</div>
    <div class="find-exam">Find an exam by:</div>
</section>

<section class="advisor-dropbox">
    <div class="dropbox">
        <select class="semester" @onchange="async (e) => { selectedSemester = ((ChangeEventArgs)e).Value?.ToString(); await LoadExams(); }">
            <option value="" selected disabled hidden>Semester</option>
            @if (semesters != null)
            {
                @foreach (DataRow semester in semesters.Rows)
                {
                    <option value="@semester["id"]">@semester["name"]</option>
                }
            }
            <option value="All">All</option>
        </select>
    </div>
</section>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (!string.IsNullOrEmpty(error))
{
    <p class="error">@error</p>
}
else if (filteredExams != null && filteredExams.Rows.Count > 0)
{
    <ul class="exam-list">
        @foreach (DataRow exam in filteredExams.Rows)
        {
            var examId = Convert.ToInt32(exam["id"]);
            <li>
                <div class="exam-details">
                    <div class="exam">
                        <div class="exam-description">@exam["description"]</div>
                        <div class="exam-batch-data">
                            <p class="exam-approval">Approval Opens: @exam["approval_opens"]</p>
                            <p class="exam-closed">Closed: @exam["closed"]</p>
                        </div>
                    </div>
                    <div class="view">
                            <button @onclick="() => NavigateToExamView(examId)">View</button>
                    </div>
                </div>
            </li>
        }
    </ul>
}
else
{
    <p>No exams found.</p>
}

@code {
    private DataTable semesters;
    private DataTable allExams;
    private DataTable filteredExams;
    private bool isLoading = true;
    private string error;
    private string selectedSemester = "All";

    protected override async Task OnInitializedAsync()
    {
        await LoadInitialData();
    }

    private async Task LoadInitialData()
    {
        try
        {
            isLoading = true;
            semesters = await db.getSemesters();
            if (semesters == null)
            {
                throw new Exception("Failed to load semesters");
            }

            await LoadExams();
        }
        catch (Exception ex)
        {
            error = $"An error occurred while loading data: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadExams()
    {
        try
        {
            isLoading = true;
            error = null;
            allExams = await db.getExamForAdvisorApproval(0);
            FilterExams();
        }
        catch (Exception ex)
        {
            error = $"An error occurred while loading exams: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void FilterExams()
    {
        if (allExams == null)
        {
            filteredExams = null;
            return;
        }

        if (selectedSemester == "All" || string.IsNullOrEmpty(selectedSemester))
        {
            filteredExams = allExams;
        }
        else
        {
            try
            {
                uint selectedSemesterId = uint.Parse(selectedSemester);

                var filteredRows = allExams.AsEnumerable()
                    .Where(row => row.Field<uint>("semester_id") == selectedSemesterId)
                    .ToList();

                filteredExams = filteredRows.Any() ? filteredRows.CopyToDataTable() : allExams.Clone();
            }
            catch (Exception ex)
            {
                error = $"An error occurred while filtering exams: {ex.Message}";
                filteredExams = allExams.Clone();
            }
        }
    }

    private void NavigateToExamView(int examId)
    {
        Navigation.NavigateTo($"/advisor-view-exam/{examId}");
    }
}

<style>
    .advisor-path {
        margin-bottom: 20px;
    }

    .exam-title {
        font-size: 24px;
        font-weight: bold;
    }

    .find-exam {
        margin-top: 10px;
        margin-bottom: 20px;
    }

    .advisor-dropbox {
        margin-bottom: 20px;
    }

    .dropbox {
        display: flex;
        gap: 10px;
    }

    .exam-list {
        margin-top: 20px;
        border: none;
    }

    .exam-details {
        border: 1px solid #ccc;
        border-radius: 5px;
        padding: 20px;
        margin-bottom: 10px;
        border: none;
        color: #074D56;
        font-size: 22px;
        font-family: Inter;
        font-style: italic;
        font-weight: 600;
        word-wrap: break-word;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .exam-description {
        font-weight: bold;
    }

    .exam-batch-data {
        margin-top: 10px;
    }

    .view {
        margin-top: 10px;
        padding: 0 10px;
    }

        .view button {
            background-color: rgba(141, 215, 225, 0.21);
            border-radius: 10px;
            padding: 10px 20px;
            border: none;
            cursor: pointer;
            font-size: 22px;
            font-family: Inter;
            font-style: italic;
            font-weight: 600;
            height: 100%;
        }

            .view button:hover {
                background-color: rgba(141, 215, 225, 0.67);
            }

    .error {
        color: red;
    }
</style>
