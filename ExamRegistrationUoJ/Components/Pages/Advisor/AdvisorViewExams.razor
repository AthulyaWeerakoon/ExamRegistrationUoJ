@page "/advisor-view-exam"
<!--"/advisor-view-exam/{exam_id}/{student_id}"        here student id shoud be parsed not account id-->
@using Microsoft.AspNetCore.Authorization
@using ExamRegistrationUoJ.Services.DBInterfaces
@using System
@using System.Data
@using System.Globalization

@rendermode InteractiveServer
@using AdvisorPages
@attribute [Authorize(Policy = "IsAdvisor")]

@inject IDBServiceAdvisorViewExam db

<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

@if (page == null)
{
    <Elements.LoadingPanel />
}
else if (page.examTitle == null || page.students == null)
{
    <Elements.LoadingPanel />
}
else
{
    <section class="advisor-path">
        <div class="path"><a href="/advisor-home">Advisor Home</a> / <a href="/advisor-view-exam">View Exams</a></div>
    </section>

    <section class="advisor-view-exam">
        <div class="advisor-view-exam-text">View Directed Exams:</div>
    </section>

    <section class="repeat-student">
        @try
        {
            DataRow row = page.examTitle.Rows[0];
            <div class="repeat-student-text-a">
                Repeat Student Approval for - @MidOrEnd(ToTitleCase((string)@row["exam_name"]))
            </div>
            <div class="repeat-student-text-b">
                @ToTitleCase((string)@row["semester_name"]) - @row["batch"] Batch
            </div>
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing page: {ex.Message}");
            Console.WriteLine(ex.StackTrace);
        }
    </section>

    <section>
        <table class="table">
            <thead>
                <tr>
                    <th>Registration Number</th>
                    <th>Student Name</th>
                    <th>Approve or Reject</th>
                    <th>View & Approve</th>
                </tr>
            </thead>
            <tbody>
                @try
                {
                    @foreach (DataRow row in page.students.Rows) 
                    {
                        var studentFullName = row["name"].ToString();
                        var studentEmail = row["ms_email"].ToString();
                        string[] parts = studentEmail.Split('@');
                        var RegistrationNumber = parts[0];
                        <tr>
                            <td data-label="Registration Number">@RegistrationNumber</td>
                            <td data-label="Student Name">@studentFullName</td>
                            <td data-label="Approve or Reject" class="approve-and-reject">
                                <button class="approve" @onclick="() => ApproveOrReject(true, false)" disabled=@stateOfReject><span class="material-icons md-36">done</span></button>
                                <button class="reject" @onclick="() => ApproveOrReject(false, true)" disabled=@stateOfApprove><span class="material-icons md-36">close</span></button>
                            </td>
                            <td data-label="View & Approve"><a href="/advisor-approval" class="btn"><div class="text">Go to</div></a></td>
                        </tr>
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error initializing page: {ex.Message}");
                    Console.WriteLine(ex.StackTrace);
                }
            </tbody>
        </table>
    </section>

    <section>
        <div class="save">
            <a class="save-btn">
                <div class="save-img"><img src="Assets/Images/Save.png" /></div>
                <div class="save-text">save</div>
            </a>
        </div>

    </section>
}


@code {
    private AdvViewExam page;

    [Parameter]
    public string exam_id { get; set; }
    private uint examId;

    [Parameter]
    public string student_id { get; set; }
    private uint studentId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            examId = !string.IsNullOrEmpty(exam_id) && uint.TryParse(exam_id, out uint parsedExamId) ? parsedExamId : 1;
            studentId = !string.IsNullOrEmpty(student_id) && uint.TryParse(student_id, out uint parsedStudentId) ? parsedStudentId : 1;
            page = new AdvViewExam(db);
            //await page.init();
            await page.getStudent(studentId);
            await page.getExamTitle(examId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing page: {ex.Message}");
            Console.WriteLine(ex.StackTrace);
        }
    }
    public static string ToTitleCase(string input)
    {
        if (string.IsNullOrEmpty(input))
        {
            return input;
        }

        TextInfo textInfo = CultureInfo.CurrentCulture.TextInfo;
        return textInfo.ToTitleCase(input.ToLower());
    }

    public static string MidOrEnd(string input)
    {
        return input != null && input.Contains("mid", StringComparison.OrdinalIgnoreCase)
            ? "Mid Semester Examination"
            : "End Semester Examination";
    }

    public bool stateOfApprove { get; set; }
    public bool stateOfReject { get; set; }

    public void ApproveOrReject(bool approve, bool reject)
    {
        if (approve)
        {
            stateOfApprove = false;
            stateOfReject = true;
        }
        else if (reject)
        {
            stateOfApprove = true;
            stateOfReject = false;
        }
    }

}
