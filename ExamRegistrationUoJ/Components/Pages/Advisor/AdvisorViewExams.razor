@page "/advisor-view-exam" 
<!-- should be "/advisor-view-exam/{exam_id} -->
@using Microsoft.AspNetCore.Authorization
@using ExamRegistrationUoJ.Services.DBInterfaces
@using System
@using System.Data
@using System.Globalization

@rendermode InteractiveServer
@using AdvisorPages
@attribute [Authorize(Policy = "IsAdvisor")]

@inject IDBServiceAdvisorViewExam db

<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

@if (page == null)
{
    <Elements.LoadingPanel />
}
else if (page.examTitle == null || page.students == null)// || page.test == null)
{
    <Elements.LoadingPanel />
}
else
{
    <section class="advisor-path">
        <div class="path"><a href="/advisor-home">Advisor Home</a> / <a href="/advisor-view-exam">View Exams</a></div>
    </section>

    <section class="advisor-view-exam">
        <div class="advisor-view-exam-text">View Directed Exams:</div>
    </section>

    <section class="repeat-student">
        @try
        {
            DataRow row = page.examTitle.Rows[0];
            <div class="repeat-student-text-a">
                Repeat Student Approval for - @MidOrEnd(ToTitleCase((string)@row["exam_name"]))
            </div>
            <div class="repeat-student-text-b">
                @ToTitleCase((string)@row["semester_name"]) - @row["batch"] Batch
            </div>
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing page: {ex.Message}");
            Console.WriteLine(ex.StackTrace);
        }
    </section>

    <section>
        <table class="table">
            <thead>
                <tr>
                    <th>Registration Number</th>
                    <th>Student Name</th>
                    <th>Approve or Reject</th>
                    <th>View & Approve</th>
                </tr>
            </thead>
            <tbody>
                @try
                {
                    @foreach (DataRow row in page.students.Rows) 
                    {
                        int id = (int)@row["id"];
                        var studentFullName = row["name"].ToString();
                        var studentEmail = row["ms_email"].ToString();
                        string[] parts = studentEmail.Split('@');
                        var RegistrationNumber = parts[0];
                        <tr>
                            <td data-label="Registration Number">@RegistrationNumber</td>
                            <td data-label="Student Name">@studentFullName</td>
                            <td data-label="Approve or Reject" class="approve-and-reject">
                                <button class="approve" @onclick="() => HandleApprovalClick(id, true)" disabled=@state[id]><span class="material-icons md-36">done</span></button>
                                <button class="reject" @onclick="() => HandleApprovalClick(id, false)" disabled=@(!state[id])><span class="material-icons md-36">close</span></button>
                            </td>
                            <td data-label="View & Approve"><a href="/advisor-approval?acc_id=@row["acc_id"]&exam_id=@exam_id" class="btn"><div class="text">Go to</div></a></td>
                        </tr>
                    }
                    /*@foreach (DataRow row_t in page.test.Rows)
                    {
                        Console.WriteLine("id " + row_t["id"] + " student_id " + row_t["student_id"] + " is_proper " + row_t["is_proper"] + " advisor_id " + row_t["advisor_id"] + " advisor_approved " + row_t["advisor_approved"]);
                    }*/
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error initializing page: {ex.Message}");
                    Console.WriteLine(ex.StackTrace);
                }
            </tbody>
        </table>
    </section>

    <section>
        <div class="save">
            <a class="save-btn">
                <div class="save-img"><img src="Assets/Images/Save.png" /></div>
                <div class="save-text">save</div>
            </a>
        </div>
    </section>
}

@code {
    private AdvViewExam page;

    [Parameter]
    public uint exam_id { get; set; }

    private Dictionary<int, bool> state = new Dictionary<int, bool>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            exam_id = 1;
            page = new AdvViewExam(db);
            await page.getStudentsInExam(exam_id);
            await page.getExamTitle(exam_id);
            //await page.test_a(exam_id);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing page: {ex.Message}");
            Console.WriteLine(ex.StackTrace);
        }
        foreach (DataRow row in page.students.Rows)
        {
            int studentId = (int)row["id"];
            bool isApproved = row["advisor_approved"] != DBNull.Value && (uint)row["advisor_approved"] != 0;
            state[studentId] = isApproved;
        }
    }

    public static string ToTitleCase(string input)
    {
        if (string.IsNullOrEmpty(input))
        {
            return input;
        }

        TextInfo textInfo = CultureInfo.CurrentCulture.TextInfo;
        return textInfo.ToTitleCase(input.ToLower());
    }

    public static string MidOrEnd(string input)
    {
        return input != null && input.Contains("mid", StringComparison.OrdinalIgnoreCase)
            ? "Mid Semester Examination"
            : "End Semester Examination";
    }

    private async Task HandleApprovalClick(int id, bool approve)
    {
        try
        {
            bool previousState = state[id];
            state[id] = approve;

            // If the state didn't change, do nothing
            if (previousState == approve)
            {
                return;
            }

            // Update the database
            await page.setAdvisorApproval((uint)id, exam_id, approve);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error handling approval click: {ex.Message}");
            Console.WriteLine(ex.StackTrace);
        }
    }
}