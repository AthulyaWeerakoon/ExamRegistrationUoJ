@page "/advisor-approval"
@using System.Data
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Policy = "IsAdvisor")]
@using ExamRegistrationUoJ.Services.DBInterfaces
@using AdvisorPages
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@rendermode InteractiveServer
@using System.Text.RegularExpressions
@using Newtonsoft.Json
@inject NavigationManager NavigationManager
@using System.Globalization

@inject IDBServiceAdvisor1 db

<PageTitle>Advisor Approval</PageTitle>

<section class="advisor-path">
    <div class="path">Advisor login &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp; Advisor home &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp; Student Approval</div>
</section>

<section class="repeat-student">
    <div class="repeat-student-text-a">
        Repeat Student Approval for- End Semester Examination
    </div>
    <div class="repeat-student-text-b">
        Semester 03 - E22 Batch
    </div>
</section>

<section>
    <div class="input">
        <div class="student-registaion-number">
            <lable>Student Registration Number :</lable>
            <div class="acc-id">@accountID</div>
            <!--<input type="text" id="inputText" class="dotted-input" placeholder="Student Registration Number." style="width:60%;"  />
        -->
        <div></div>
            </div>
        <div class="student-name">
            <lable>Student Name :</lable>
            <div class="full-name">@fullName</div>
            <!--<input type="text" id="inputText" class="dotted-input" placeholder="Student Name."  style="width:70%;"/>-->
        </div>
    </div>
   
</section>


<section>
    <table class="table">
        <thead>
            <tr>
                <th>Course Code</th>
                <th>Course</th>
                <th>Attempt</th>
                <th>Coordinator-approved status</th>
                <th>Subject Coordinator</th>
            </tr>
        </thead>
        <tbody>
            
            
            <tr>
                <td  data-label="Course Code">EC3060</td>
                <td  data-label="Course">analog and degital </td>
                <td  data-label="Attempt">2nd</td>
                <td style="font-weight: bold;" data-label="Coordinator-approved status">Approved </td>
                <td data-label="Subject Coordinator">Coordinator 1</td>
            </tr>
        </tbody>
    </table>
</section>

<section>
    <div class="btn">
        <div class="approve-reject-btn">
            <div class="approve-btn">
                <button class="approve"><img src="Assets/Images/approve.png" style="width: 60px; height: 35px;" />Approve</button>
            </div>
            <div class="reject-btn">
                <button class="approve"><img src="Assets/Images/reject.png" style="width: 60px; height: 35px;" />Reject</button>
            </div>
        </div>
        <div class="save-btn">
            <button class="save"><img src="Assets/Images/Save.png" style="width: 36px; height: 35px;" /> &nbsp;&nbsp; Save</button>
        </div>
    </div>
</section>


@code {
    [Parameter]
    public int acc_id { get; set; }
    
    [Inject] IJSRuntime jsRuntime { get; set; }
    private int? accountID;
    private int? regNo;
    private string? fullName;
    private DataTable? Re_Attempt_Student;
    private string? courseCode;
    private string? courseName;
    private int? attempt;
    private bool? approvalStatus;
    private string? coName;
    
    
    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var queryParams = System.Web.HttpUtility.ParseQueryString(uri.Query);
        
        //Exam_id_number = Convert.ToInt32(Exam_id);
        if (int.TryParse(queryParams["acc_id"], out int accId))
        {
            accountID = accId;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (accountID.HasValue)
        {
            try
            {
                string regNoString = await db.getStudentRegNo(accountID.Value);
                if (int.TryParse(regNoString, out int regNoInt))
                {
                    regNo = regNoInt;
                }
                else
                {
                    // Handle the case where regNo is not a valid integer
                    Console.WriteLine("Error: Registration number is not a valid integer.");
                }
            }
            catch (Exception ex)
            {
                // Handle the exception (e.g., log it, show an error message, etc.)
                Console.WriteLine($"Error fetching student registration number: {ex.Message}");
            }
        }
    }
}