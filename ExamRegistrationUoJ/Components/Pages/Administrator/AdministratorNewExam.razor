@page "/admin-new-exam/{exam_id:int?}"
@using Microsoft.AspNetCore.Authorization
@using AdminPages
@using Services.DBInterfaces
@using System.Data
@using Microsoft.JSInterop
@using System.Text.RegularExpressions
@rendermode InteractiveServer
@attribute [Authorize(Policy = "IsAdmin")]

@inject IDBServiceAdmin1 db

<PageTitle>New Exam</PageTitle>

@if (page == null)
{
    <Elements.LoadingPanel/>
}
else if(page.coursesFromDepts == null || page.departments == null || page.coordinators == null) {
    <Elements.LoadingPanel/>
}
else {
    <div class="AdministratorNewExam" id="add-dialog-box" style="display:block">
        <div class="add-exam" style="text-decoration: underline;">
            Add a new exam
        </div>
        <div class="exam-details">
            <div class="exam-row exam-title">
                <span>Exam Title</span>
                <span class="colon">:</span>
                <input type="text" placeholder="Exam Title" @bind=page.examTitleInput />
            </div>
            <div class="exam-row exam-semester">
                <span>Semester</span>
                <span class="colon">:</span>
                <select @bind=page.semesterOpt>
                    <option selected disabled hidden>Semester</option>
                    @foreach (DataRow row in page.semesters.Rows)
                    {
                        <option value=@row["id"]>@row["name"]</option>
                    }
                </select>
            </div>
            <div class="exam-row exam-batch">
                <span>Batch</span>
                <span class="colon">:</span>
                <input type="text" placeholder="Batch" @bind=page.batchInput/>
            </div>
            <div class="exam-row exam-batch">
                <div class="vertical-span">
                    <span>Time extention for</span>
                    <span>Coordinator approval</span>
                </div>
                <span class="colon">:</span>
                <input type="number" min="1" max="16" placeholder="Weeks" @bind=page.coordTimeExtentInput/>
            </div>
            <div class="exam-row exam-batch">
                <div class="vertical-span">
                    <span>Time extention for</span>
                    <span>Advisor approval</span>
                </div>
                <span class="colon">:</span>
                <input type="number" min="1" max="16" placeholder="Weeks" @bind=page.adviTimeExtentInput/>
            </div>
            <div class="exam-row exam-closing-date">
                <div class="vertical-span">
                    <span>Registration Closing Date</span>
                    <span>(For Students)</span>
                </div>
                <span class="colon">:</span>
                <input type="date" class="date-input" min=@DateTime.Today.AddDays(1).ToString("yyyy'-'MM'-'dd") @bind=page.SelectedDate/>

            </div>
        </div>

        <!-- blazor infused start -->
        
        @{
            int i = 0;
        }

        @foreach (string? deptOpt in page.deptOpts)
        {
            int tableIdx = i;
            <div class="add-exam-table" id="add-table" style="display:block">
                <div class="department-details">
                    <span class="department-name">Department:</span>
                    @if(page.coursesFromDepts[tableIdx] is null){
                        <select value=@((page.deptOpts[tableIdx] is null)? "Department": page.deptOpts[tableIdx]) @onchange="async (e) => { toggleBlocking(); await page.setDepartment(tableIdx, ((ChangeEventArgs)e).Value.ToString()); toggleBlocking(); }">
                            <option selected disabled hidden>Department</option>
                            @foreach (DataRow row in page.departments.Rows)
                            {
                                if (page.deptOpts.Contains(Convert.ToString(row["id"])))
                                {
                                    <option value=@row["id"] disabled hidden>@row["name"]</option>
                                }
                                else
                                {
                                    <option value=@row["id"]>@row["name"]</option>
                                }
                            }
                        </select>
                    }
                    else
                    {
                        <select disabled>
                            <option selected disabled hidden>@(page.getDeptFromId(int.Parse(deptOpt)))</option>
                        </select>
                    }
                </div>

                <div class="exam-department-table-block" id="add-table">
                    <table class="exam-department-table">
                        <tr style="background-color: rgba(66, 208, 239, 1);">
                            <th class="course-code">Course Code</th>
                            <th class="course">Course</th>
                            <th class="course-co-ordinator">Course Co-ordinator (email)</th>
                            <th class="course"></th>
                        </tr>
                        @if(page.coursesFromDepts[tableIdx] is not null)
                        {
                            int j = 0;
                            @foreach(DataRow row in page.coursesFromDepts[tableIdx].Rows)
                            {
                                int rowIdx = j;
                                <tr>
                                    <td>@row["course_code"]</td>
                                    <td>@row["course_name"]</td>
                                    <td>
                                        <Elements.AutofillInput AutofillSuggestions="emailList" InputValue=@Convert.ToString(row["coordinator_email"]) OnAutofillBlur="(text) => CoordInputOnBlur(text, row)" />
                                    </td>
                                    <td><img src="Assets/Images/Indeterminate_Checkbox.png" width="40px" height="40px" style="cursor: pointer" @onclick="@(() => { 
                                                                                            if(string.IsNullOrEmpty(Convert.ToString(row["coordinator_email"]))) page.removeCourse(tableIdx, rowIdx, Convert.ToInt32(row["idx"]));
                                                                                            else {
                                                                                                removeCourseName = Convert.ToString(row["course_name"]);
                                                                                                removeCourseRow = row;
                                                                                                removeCourseRowIdx = rowIdx;
                                                                                                removeCourseTableIdx = tableIdx;
                                                                                                removeCourseMsg = true;
                                                                                            }
                                                                                            StateHasChanged();
                                                                                            })"/></td>
                                </tr>
                            j++;
                            }
                        }
                        <tr>
                            <td colspan="4" @onclick="@(() => { if(page.deptOpts[tableIdx] is null) { courseAddFailedMsg = true; StateHasChanged(); } else { addCourseDeptId = int.Parse(page.deptOpts[tableIdx]); addCourseTableIdx = tableIdx; addCourseList = page.coursesAvailableFromDepts[tableIdx]; addCourseOpt = "Course code"; addCourseOverlay=true; StateHasChanged(); } })">
                                <div class="add-item-dialog ">
                                    <button class="addbutton" ><img src="Assets/Images/add_buttom.png" class="addbutton"/></button>
                                </div>
                            </td>
                        </tr>
                    </table>
                </div>
                <div class="delete-department" style="padding-bottom:10px; margin-bottom:10px;" @onclick="() => { if(page.coursesFromDepts[tableIdx] is not null && page.deptOpts[tableIdx] is not null) { removeDeptIdx = tableIdx; removeDeptName = page.getDeptFromId(int.Parse(page.deptOpts[tableIdx])); removeDeptMsg = true; StateHasChanged(); } else { page.removeDept(tableIdx); StateHasChanged(); } }">
                    <button class="delete-department-button">
                        <img src="Assets/Images/Indeterminate_Checkbox.png" class="delete-department-button" style="width: 36px; height: 33px;" />
                    </button>
                    <span>Department</span>
                </div>
            </div>
            i++;
        }

        <div class="add-department" @onclick="() => { if(page.deptOpts.Contains(null)) deptAddFailedMsg = true; else page.addDepartment(); StateHasChanged(); }">
            <button class="add-department-button"><img src="Assets/Images/add_department.png" class="add-department-button" /></button>
            <span>Department</span>
        </div>
        
        <!-- blazor infused end -->

        <div class="save-conform">
            <div class="save">
                <a class="add-exam-button" style="text-decoration: none; color: black;"><img src="Assets/Images/Save.png" /><span>Save &#38; Quit</span></a>
            </div>
            <div class="conform">
                <a href="admin-home" class="add-exam-button" style="text-decoration: none; color: black;"><img src="Assets/Images/Checked_Checkbox.png" /><span>Confirm</span></a>
            </div>
        </div>
    </div>

    @if(addCourseOverlay)
    {
        <div class="deselect-plane" @onclick="() => { addCourseOverlay = false; StateHasChanged(); }" />
        <div class="message-box">
            <div class="container">
                <div class="text">Select Course Code:</div>
                <select @bind=@addCourseOpt>
                    <option selected disabled hidden>Course code</option>
                    @foreach (KeyValuePair<int, string> row in addCourseList)
                    {
                        <option value=@row.Key>@row.Value</option>
                    }
                </select>
            </div>
            <div class="add-course" @onclick="@(() => { if(addCourseOpt == "Course code") { selectACourseMsg = true; StateHasChanged(); } else { page.addCourse(addCourseTableIdx, addCourseDeptId, int.Parse(addCourseOpt)); addCourseOverlay = false; StateHasChanged(); } })">
                <button class="add-course-button" onclick="showAddItemDialog()"><img src="Assets/Images/add_department.png" /></button>
                <span>Add course</span>
            </div>
        </div>
    }

    <DialogBoxes.DialogOptions Title="Save Unsuccessful" Message="Complete the Exam Description properly before saving the draft" Opened="saveUnsuccessfulMsg" ClosedCallback="() => { saveUnsuccessfulMsg = false; StateHasChanged(); }" />
    <DialogBoxes.DialogOptions Title="Invalid Email" Message="Enter a valid email" Opened="invalidEmailMsg" ClosedCallback="() => { invalidEmailMsg = false; StateHasChanged(); }" />
    <DialogBoxes.DialogOptions Title="Select A Department" Message="Select a department before adding a course" Opened="courseAddFailedMsg" ClosedCallback="() => { courseAddFailedMsg = false; StateHasChanged(); }" />
    <DialogBoxes.DialogOptions Title="Department Addition Failed" Message="Select department name for all previously added departments before attempting to add more" Opened="deptAddFailedMsg" ClosedCallback="() => { deptAddFailedMsg = false; StateHasChanged(); }" />
    <DialogBoxes.DialogOptions Title="Exam Confirmation Failed" Message="Fill the exam description properly and add at least one course per added departments" Opened="examConfirmFailedMsg" ClosedCallback="() => { examConfirmFailedMsg = false; StateHasChanged(); }" />
    <DialogBoxes.DialogOptions Title="Select A Course" Message="Select a course to add" Opened="selectACourseMsg" ClosedCallback="() => { selectACourseMsg = false; StateHasChanged(); }" />
    <DialogBoxes.DialogOptions Title="Confirm Coordinator Addition"
                               Message="@($"Coordinator account with email \"{addCourseCoordMail}\" does not exist. Do you want to permit this account into the system as a subject coordinator?")"
                               Buttons="addCourseCoordOpts"
                               Opened="addCourseCoordMsg"
                               ActionCallback="async (i) => { 
                                                        if(i != 0) {
                                                            addCourseCoordMsg = false;
                                                            StateHasChanged();}
                                                        else {
                                                            toggleBlocking();
                                                            await page.addNewCoordToCourse(addCourseCoordRow, addCourseCoordMail);
                                                            addCourseCoordMsg = false;
                                                            toggleBlocking();
                                                        }}"
                               ClosedCallback="() => { addCourseCoordMsg = false; StateHasChanged(); }" />
    <DialogBoxes.DialogOptions Title="Confirm Course Removal"
                               Message="@($"Are you sure you want to remove course {removeCourseName}?")"
                               Buttons="removeCourseOpts"
                               Opened="removeCourseMsg"
                               ActionCallback="@((i) => {
                                                        if(i != 0) {
                                                            removeCourseMsg = false;
                                                            StateHasChanged();}
                                                        else {
                                                            page.removeCourse(removeCourseTableIdx, removeCourseRowIdx, Convert.ToInt32(removeCourseRow["idx"]));
                                                            removeCourseMsg = false;
                                                            StateHasChanged();
                                                        }})"
                               ClosedCallback="() => { removeCourseMsg = false; StateHasChanged(); }" />
    <DialogBoxes.DialogOptions Title="Confirm Department Removal"
                               Message="@($"Are you sure you want to remove department {removeDeptName}? (it includes a several courses that will be removed from the exam along with it)")"
                               Buttons="removeDeptOpts"
                               Opened="removeDeptMsg"
                               ActionCallback="(i) => { if(i != 0) removeDeptMsg = false; else page.removeDept(removeDeptIdx); StateHasChanged(); }"
                               ClosedCallback="() => { removeDeptMsg = false; StateHasChanged(); }" />
    <DialogBoxes.DialogOptions Title="Confirm Exam Publication" 
                               Message="Are you sure you want to confirm publication of the exam? (Note: this action is irreversible and an exam can no logner be edited after it's published)" 
                               Buttons="confirmExamConfirmationOpts" 
                               Opened="examConfirmFailedMsg"
                               ActionCallback="(i) => { if(i != 0) examConfirmFailedMsg = false; StateHasChanged(); }"
                               ClosedCallback="() => { examConfirmFailedMsg = false; StateHasChanged(); }" />
}

@code {
    [Parameter]
    public int? exam_id { get; set; }

    AdminNewExam page;

    public bool saveUnsuccessfulMsg = false;

    public bool courseAddFailedMsg = false;

    public bool deptAddFailedMsg = false;

    public bool examConfirmFailedMsg = false;

    public bool selectACourseMsg = false;

    public bool invalidEmailMsg = false;

    public bool addCourseCoordMsg = false;
    public string addCourseCoordMail = "";
    public DataRow addCourseCoordRow;
    public string[] addCourseCoordOpts = { "Yes, permit", "No, don't permit" };

    public bool removeCourseMsg = false;
    public string removeCourseName = "";
    public int removeCourseTableIdx = 0;
    public int removeCourseRowIdx = 0;
    public DataRow removeCourseRow;
    public string[] removeCourseOpts = { "Yes, remove", "No, cancel" };

    public bool removeDeptMsg = false;
    public int removeDeptIdx = 0;
    public string removeDeptName = "";
    public string[] removeDeptOpts = { "Yes, remove", "No, cancel" };

    public bool confirmExamConfirmation = false;
    public string[] confirmExamConfirmationOpts = { "Yes", "No, cancel" };

    public bool addCourseOverlay = false;
    public int addCourseTableIdx = 0;
    public int addCourseDeptId = 0;
    public string addCourseOpt = "Course code";
    public List<KeyValuePair<int, string>> addCourseList;

    private bool blocking = false;
    private List<string> emailList = new List<string> ();

    protected override async Task OnInitializedAsync()
    {
        page = new AdminNewExam(db, exam_id);
        await page.init();
        emailList = page.coordinators.AsEnumerable().Select(row => Convert.ToString(row["email"])).ToList();
    }

    private void toggleBlocking()
    {
        blocking = (blocking) ? false : true;
        StateHasChanged();
    }

    private void CoordInputOnBlur(string text, DataRow row)
    {
        string emailPattern = @"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$";
        if (Regex.IsMatch(text, emailPattern))
        {
            int? coordId = page.doesCoordExist(text);
            if (coordId is not null) {
                row["coordinator_id"] = coordId;
                row["coordinator_email"] = page.getCoordEmailFromId((int)coordId);
            }
            else if (!string.IsNullOrEmpty(text))
            {
                addCourseCoordRow = row;
                addCourseCoordMail = text;
                addCourseCoordMsg = true;
            }
        }
        else
        {
            invalidEmailMsg = true;
            row["coordinator_email"] = "";
        }
        StateHasChanged();
    }
}
