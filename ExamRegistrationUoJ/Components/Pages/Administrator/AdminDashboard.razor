@page "/admin-dashboard"
@using System.Data
@using ExamRegistrationUoJ.Services.DBInterfaces
@using ExamRegistrationUoJ.PageClasses.AdminPages
@using Microsoft.AspNetCore.Authorization
@using System.Text.RegularExpressions
@rendermode InteractiveServer
@attribute [Authorize(Policy = "IsAdmin")]

@inject IJSRuntime JS
@inject IDBServiceAdminDashboard db

<Elements.AddressPath displayNames=displayNames linkingAddresses=addresses />

<div class="Admin-dashboard">
    <div class="list">
        <div class="list-text">
            System Dashboard
        </div>
        <div class="list-img">
            <img src="Assets/Images/department_List.png" alt="list" @onclick="@(async () => await JS.InvokeVoidAsync("toggleDiv", "departmentDiv"))" />
            <img src="Assets/Images/semester_list.png" alt="list" @onclick="@(async () => await JS.InvokeVoidAsync("toggleDiv", "semesterDiv"))" />
            <img src="Assets/Images/advisor_list.png" alt="list" @onclick="@(async () => await JS.InvokeVoidAsync("toggleDiv", "advisorDiv"))" />
            <img src="Assets/Images/course_list.png" alt="list" @onclick="@(async () => await JS.InvokeVoidAsync("toggleDiv", "courseDiv"))" />
        </div>
    </div>
    
    <div class="department-list hidden" id="departmentDiv">
        <div class="department-list-details">
            <div class="department-list-details-text">
                Department List:
                <div class="department-list-details-text-list-search">
                    <input class="department-list-input" @bind="departmentSearchText" @bind:event="oninput" />
                    <button><img src="Assets/Images/search.png" alt="search" style="width: 33px; height: 28px;" /></button>
                </div>
            </div>
            
            <div class="department-list-details-table">
                <table class="department-table">
                    <thead>
                        <tr>
                            <th>Department</th>
                            <th style="width: 30px;"><button class="table-inside-button"></button></th>
                            <th style="width: 30px;"><button class="table-inside-button"></button></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var department in FilteredDepartments)
                        {
                            <tr>
                                    <td>@department.name </td>
                                <td style="width: 30px;"><button class="table-inside-button" @onclick="() => UpdateDepartmentOpen(department.idx)">Edit</button></td>
                                <td style="width: 30px;"><button class="table-inside-button red" @onclick="() => RemoveDepartmentOpen(department.idx)">Delete</button></td>
                            </tr>
                        }
                        <tr @onclick="() => AddDepartmentOpen()" style="cursor: pointer">
                            <td colspan="3"><img src="Assets/Images/add_buttom.png" /></td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <div class="semester-list hidden" id="semesterDiv">
        <div class="semester-list-details">
            <div class="semester-list-details-text">
                Semester List:
                <div class="semester-list-details-text-list-search">
                    <input class="semester-list-input" @bind="semesterSearchText" @bind:event="oninput" />
                    <button><img src="Assets/Images/search.png" alt="search" style="width: 33px; height: 28px;" /></button>
                </div>
            </div>
            <div class="semester-list-details-table">
                <table class="semester-table">
                    <thead>
                        <tr>
                            <th>Semesters</th>
                            <th style="width: 30px;"><button class="table-inside-button"></button></th>
                            <th style="width: 30px;"><button class="table-inside-button"></button></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var semester in FilteredSemesters)
                        {
                            <tr>
                                <td>@semester.name </td>
                                <td style="width: 30px;"><button class="table-inside-button" @onclick="() => UpdateSemesterOpen(semester.idx)">Edit</button></td>
                                <td style="width: 30px;"><button class="table-inside-button red" @onclick="() => RemoveSemesterOpen(semester.idx)">Delete</button></td>
                            </tr>
                        }
                        <tr @onclick="() => AddSemesterOpen()" style="cursor: pointer">
                            <td colspan="3"><img src="Assets/Images/add_buttom.png" /></td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <div class="advisor-list hidden" id="advisorDiv">
        <div class="advisor-list-details">
            <div class="advisor-list-details-text">
                <div class="advisor-list-details-text-list">Advisor List: </div>
                <div class="advisor-list-details-text-list-search">
                    <input class="advisor-list-input" @bind="advisorSearchText" @bind:event="oninput" />
                    <button><img src="Assets/Images/search.png" alt="search" style="width: 33px; height: 28px;" /></button>
                </div>
            </div>
            <div class="advisor-list-details-table">
                <table class="advisor-table">
                    <thead>
                        <tr>
                            <th>Advisor Name</th>
                            <th>Advisor Email</th>
                            <th style="width: 30px;"><button class="table-inside-button"></button></th>
                            <th style="width: 30px;"><button class="table-inside-button"></button></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var advisor in FilteredAdvisors)
                        {
                            <tr>
                                <td>@advisor.name </td>
                                <td>@advisor.email </td>
                                <td style="width: 30px;"><button class="table-inside-button" @onclick="() => UpdateAdvisorOpen(advisor.idx)">Edit</button></td>
                                <td style="width: 30px;"><button class="table-inside-button red" @onclick="() => RemoveAdvisorOpen(advisor.idx)">Delete</button></td>
                            </tr>
                        }
                        <tr @onclick="() => AddAdvisorOpen()">
                            <td colspan="4"><img src="Assets/Images/add_buttom.png" /></td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <div class="course-list hidden" id="courseDiv">
        <div class="course-list-details">
            <div class="course-list-details-text">
                <div class="course-list-details-text-list">Course List: </div>
                <div class="course-list-details-text-list-search">
                    <input class="course-list-input" @bind="courseSearchText" @bind:event="oninput" />
                    <button><img src="Assets/Images/search.png" alt="search" style="width: 33px; height: 28px;" /></button>
                </div>
            </div>
            <div class="course-list-details-table">
                <table class="course-table">
                    <thead>
                        <tr>
                            <th>Course Code</th>
                            <th>Course</th>
                            <th>Semester</th>
                            <th style="width: 30px;"><button class="table-inside-button"></button></th>
                            <th style="width: 30px;"><button class="table-inside-button"></button></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var course in FilteredCourses)
                        {
                            <tr>
                                <td style="width: 200px;">@course.code</td>
                                <td style="width: 300px;">@course.name </td>
                                <td style="width: 250px;">@pageA.getSemesterFromId(@course.semester) </td>
                                <td style="width: 30px;"><button class="table-inside-button" @onclick="async () => await UpdateCourseOpen(course.idx)">Edit</button></td>
                                <td style="width: 30px;"><button class="table-inside-button red" @onclick="() => RemoveCourseOpen(course.idx)">Delete</button></td>
                            </tr>
                        }
                        <tr @onclick="() => AddCourseOpen()">
                            <td colspan="5"><img src="Assets/Images/add_buttom.png" /></td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>


@if(updateDepartmentDiag || addDepartmentDiag)
{
    <div style="display:block" class="blocking" id="add-item">
        @if (updateDepartmentDiag)
        {
            <div class="deselect-plane" @onclick="() => UpdateDepartmentClose()"/>
        }
        else
        {
            <div class="deselect-plane" @onclick="() => AddDepartmentClose()"/>
        }
        <div class="msg hover-box">
            @if (updateDepartmentDiag) { <h1>Update Department </h1> } else { <h1>Add Department</h1> }
            <p>Fill out the following form and confirm</p>
            <table style="background-color: white">
                <tbody>
                    <tr style="background-color: white">
                        <td>Name: </td>
                        <td><input type="text" style="width: 80%" @bind=@DepartmentDiag.name/></td>
                    </tr>
                </tbody>
            </table>
            @if (updateDepartmentDiag)
            {
                <button @onclick="async () => {ToggleBlocking(); if(regexDepartment()) { await pageA.UpdateDepartmentName(DepartmentDiag.id, DepartmentDiag.name); UpdateDepartmentClose(); } else { incompleteDepartmentDiag = true; } ToggleBlocking();}">Update</button>
                <button @onclick="() => UpdateDepartmentClose()">Cancel</button>
            }
            else
            {
                <button @onclick="async () => {ToggleBlocking(); if(regexDepartment()) { DepartmentDiag.id = await pageA.AddDepartment(DepartmentDiag.name); DepartmentDiag.idx = departmentList.Count; departmentList.Add(DepartmentDiag); AddDepartmentClose(); } else { incompleteDepartmentDiag = true; } ToggleBlocking();}">Add</button>
                <button @onclick="() => AddDepartmentClose()">Cancel</button>
            }
        </div>
    </div>
}

@if (removeDepartmentDiag)
{
    <div style="display:block" class="blocking" id="add-item">
        <div class="deselect-plane" @onclick="() => RemoveDepartmentClose()" />
        <div class="msg hover-box">
            <h1>Are you sure?</h1>
            <p>Confirm deletion of department <b>@DepartmentDiag.name</b>?</p>
            <button @onclick="async () => {ToggleBlocking(); await RemoveDepartmentWithExceptionHandling(DepartmentDiag); RemoveDepartmentClose(); ToggleBlocking();}">Remove</button>
            <button @onclick="() => RemoveDepartmentClose()">Cancel</button>
        </div>
    </div>
}

@if (updateSemesterDiag || addSemesterDiag)
{
    <div style="display:block" class="blocking" id="add-item">
        @if (updateSemesterDiag)
        {
            <div class="deselect-plane" @onclick="() => UpdateSemesterClose()" />
        }
        else
        {
            <div class="deselect-plane" @onclick="() => AddSemesterClose()" />
        }
        <div class="msg hover-box">
            @if (updateSemesterDiag)
            {
                <h1>Update Semester </h1>
            }
            else
            {
                <h1>Add Semester</h1>
            }
            <p>Fill out the following form and confirm</p>
            <table style="background-color: white">
                <tbody>
                    <tr style="background-color: white">
                        <td>Name: </td>
                        <td><input type="text" style="width: 80%" @bind=@SemesterDiag.name /></td>
                    </tr>
                </tbody>
            </table>
            @if (updateSemesterDiag)
            {
                <button @onclick="async () => { ToggleBlocking(); if(regexSemester()) { await pageA.UpdateSemesterName(SemesterDiag.id, SemesterDiag.name); UpdateSemesterClose(); } else { incompleteSemesterDiag = true; } ToggleBlocking(); }">Update</button>
                <button @onclick="() => UpdateSemesterClose()">Cancel</button>
            }
            else
            {
                <button @onclick="async () => { ToggleBlocking(); if(regexSemester()) { SemesterDiag.id = await pageA.AddSemester(SemesterDiag.name); SemesterDiag.idx = semesterList.Count; semesterList.Add(SemesterDiag); AddSemesterClose(); } else { incompleteSemesterDiag = true; } ToggleBlocking(); }">Add</button>
                <button @onclick="() => AddSemesterClose()">Cancel</button>
            }
        </div>
    </div>
}

@if (removeSemesterDiag)
{
    <div style="display:block" class="blocking" id="add-item">
        <div class="deselect-plane" @onclick="() => RemoveSemesterClose()" />
        <div class="msg hover-box">
            <h1>Are you sure?</h1>
            <p>Confirm deletion of semester <b>@SemesterDiag.name</b>?</p>
            <button @onclick="async () => {ToggleBlocking(); await RemoveSemesterWithExceptionHandling(SemesterDiag); RemoveSemesterClose(); ToggleBlocking();}">Remove</button>
            <button @onclick="() => RemoveSemesterClose()">Cancel</button>
        </div>
    </div>
}

@if (updateCourseDiag || addCourseDiag)
{
    <div style="display:block" class="blocking" id="add-item">
        @if (updateCourseDiag)
        {
            <div class="deselect-plane" @onclick="() => UpdateCourseClose()" />
        }
        else
        {
            <div class="deselect-plane" @onclick="() => AddCourseClose()" />
        }
        <div class="msg hover-box">
            @if (updateCourseDiag)
            {
                <h1>Update Course </h1>
            }
            else
            {
                <h1>Add Course</h1>
            }
            <p>Fill out the following form and confirm</p>
            <table style="background-color: white">
                <tbody>
                    <tr style="background-color: white">
                        <td>Name: </td>
                        <td><input type="text" style="width: 80%" @bind=@CourseDiag.name /></td>
                    </tr>
                    <tr style="background-color: white">
                        <td>Code: </td>
                        <td><input type="text" style="width: 80%" @bind=@CourseDiag.code /></td>
                    </tr>
                    <tr style="background-color: white">
                        <td>Semester: </td>
                        <td>
                            <select style="width: 80%" @bind=@CourseDiag.semester>
                                <option selected hidden>Select Semester</option>
                                @foreach (DataRow row in pageA.Semesters.Rows)
                                {
                                    <option value=@row["id"]>@row["name"]</option>
                                }
                            </select>
                        </td>
                    </tr>
                    <tr style="background-color: white">
                        <td>Departments: </td>
                        <td>
                            <select style="width: 80%" @bind=@CourseDiag.departments multiple>
                                <option selected hidden>Select Departments</option>
                                @foreach (DataRow row in pageA.Departements.Rows)
                                {
                                    <option value=@row["id"]>@row["name"]</option>
                                }
                            </select>
                        </td>
                    </tr>
                </tbody>
            </table>
            @if (updateCourseDiag)
            {
                <button @onclick="async () => { ToggleBlocking(); if(regexCourse()) { await pageA.UpdateCourse(CourseDiag.id, CourseDiag.code, CourseDiag.name, CourseDiag.semester, CourseDiag.departments); UpdateCourseClose(); } else { incompleteCourseDiag = true; } ToggleBlocking(); }">Update</button>
                <button @onclick="() => UpdateCourseClose()">Cancel</button>
            }
            else
            {
                <button @onclick="async () => { ToggleBlocking(); if(regexCourse()) { CourseDiag.id = await pageA.AddCourse(CourseDiag.code, CourseDiag.name, CourseDiag.semester, CourseDiag.departments); CourseDiag.idx = courseList.Count; courseList.Add(CourseDiag); AddCourseClose(); } else { incompleteCourseDiag = true; } ToggleBlocking(); }">Add</button>
                <button @onclick="() => AddCourseClose()">Cancel</button>
            }
        </div>
    </div>
}

@if (removeCourseDiag)
{
    <div style="display:block" class="blocking" id="add-item">
        <div class="deselect-plane" @onclick="() => RemoveCourseClose()" />
        <div class="msg hover-box">
            <h1>Are you sure?</h1>
            <p>Confirm deletion of course <b>@CourseDiag.name</b>?</p>
            <button @onclick="async () => {ToggleBlocking(); await RemoveCoursesWithExceptionHandling(CourseDiag); RemoveCourseClose(); ToggleBlocking();}">Remove</button>
            <button @onclick="() => RemoveCourseClose()">Cancel</button>
        </div>
    </div>
}

@if (updateAdvisorDiag || addAdvisorDiag)
{
    <div style="display:block" class="blocking" id="add-item">
        @if (updateAdvisorDiag)
        {
            <div class="deselect-plane" @onclick="() => UpdateAdvisorClose()" />
        }
        else
        {
            <div class="deselect-plane" @onclick="() => AddAdvisorClose()" />
        }
        <div class="msg hover-box">
            @if (updateAdvisorDiag)
            {
                <h1>Update Advisor </h1>
            }
            else
            {
                <h1>Add Advisor</h1>
            }
            <p>Fill out the following form and confirm</p>
            <table style="background-color: white">
                <tbody>
                    <tr style="background-color: white">
                        <td>Name: </td>
                        <td><input type="text" style="width: 80%" @bind=@AdvisorDiag.name /></td>
                    </tr>
                    <tr style="background-color: white">
                        <td>Email: </td>
                        <td><input type="text" style="width: 80%" @bind=@AdvisorDiag.email /></td>
                    </tr>
                </tbody>
            </table>
            @if (updateAdvisorDiag)
            {
                <button @onclick="async () => { ToggleBlocking(); if(regexAdvisor()) { await pageA.UpdateAdvisor(AdvisorDiag.id, AdvisorDiag.name, AdvisorDiag.email); UpdateAdvisorClose(); } else { incompleteAdvisorDiag = true; } ToggleBlocking(); }">Update</button>
                <button @onclick="() => UpdateAdvisorClose()">Cancel</button>
            }
            else
            {
                <button @onclick="async () => { ToggleBlocking(); if(regexAdvisor()) { AdvisorDiag.id = await pageA.AddAdvisor(AdvisorDiag.name, AdvisorDiag.email); AdvisorDiag.idx = advisorList.Count; advisorList.Add(AdvisorDiag); AddAdvisorClose(); } else { incompleteAdvisorDiag = true; } ToggleBlocking(); }">Add</button>
                <button @onclick="() => AddAdvisorClose()">Cancel</button>
            }
        </div>
    </div>
}

@if (removeAdvisorDiag)
{
    <div style="display:block" class="blocking" id="add-item">
        <div class="deselect-plane" @onclick="() => RemoveAdvisorClose()" />
        <div class="msg hover-box">
            <h1>Are you sure?</h1>
            <p>Confirm deletion of Advisor <b>@AdvisorDiag.name</b>?</p>
            <button @onclick="async () => {ToggleBlocking(); await RemoveAdvisorWithExceptionHandling(AdvisorDiag); RemoveAdvisorClose(); ToggleBlocking();}">Remove</button>
            <button @onclick="() => RemoveAdvisorClose()">Cancel</button>
        </div>
    </div>
}

<DialogBoxes.DialogOptions Opened=faiureDialog Title="Task Unsuccessful" Message="The task has failed with an Exception. If you were attempting to remove any entries from the database, make sure that there are no other entities that might depends on the item you attempted to remove" ClosedCallback="() => {faiureDialog = false; StateHasChanged();}"/>

<DialogBoxes.DialogOptions Opened=incompleteSemesterDiag Title="Invalid Form Data" Message="Semester name must not be empty and must not have any special characters" ClosedCallback="()=>{ incompleteSemesterDiag = false; StateHasChanged(); }" />
<DialogBoxes.DialogOptions Opened=incompleteDepartmentDiag Title="Invalid Form Data" Message="Department name must not be empty and must not have any special characters or numbers" ClosedCallback="()=>{ incompleteDepartmentDiag = false; StateHasChanged(); }" />
<DialogBoxes.DialogOptions Opened=incompleteAdvisorDiag Title="Invalid Form Data" Message="Advisor name and email must not be empty. Advisor name must not have any special characters and the email must be of a valid format." ClosedCallback="()=>{ incompleteAdvisorDiag = false; StateHasChanged(); }" />
<DialogBoxes.DialogOptions Opened=incompleteCourseDiag Title="Invalid Form Data" Message="No field can be empty. The course code must only have uppercase letters and numbers (no whitespaces). Course name cannot have numbers or special characters." ClosedCallback="()=>{ incompleteCourseDiag = false; StateHasChanged(); }" />

@if (blocking)
{
    <Elements.LoadingPanel />    
}

<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Hide all divs initially
        document.getElementById('departmentDiv').classList.add('hidden');
        document.getElementById('semesterDiv').classList.add('hidden');
        document.getElementById('advisorDiv').classList.add('hidden');
        document.getElementById('courseDiv').classList.add('hidden');
    });

    function toggleDiv(divId) {
        // Get the div element
        var div = document.getElementById(divId);

        // If the div is currently hidden, hide all other divs and show this one
        if (div.classList.contains('hidden')) {
            document.getElementById('departmentDiv').classList.add('hidden');
            document.getElementById('semesterDiv').classList.add('hidden');
            document.getElementById('advisorDiv').classList.add('hidden');
            document.getElementById('courseDiv').classList.add('hidden');
            div.classList.remove('hidden');
        } else {
            // If the div is currently visible, hide it
            div.classList.add('hidden');
        }
    }
</script>

@code {
    private bool blocking = false;

    private bool updateDepartmentDiag = false;
    private bool updateSemesterDiag = false;
    private bool updateAdvisorDiag = false;
    private bool updateCourseDiag = false;

    private bool addDepartmentDiag = false;
    private bool addSemesterDiag = false;
    private bool addAdvisorDiag = false;
    private bool addCourseDiag = false;

    private bool removeDepartmentDiag = false;
    private bool removeSemesterDiag = false;
    private bool removeAdvisorDiag = false;
    private bool removeCourseDiag = false;

    private bool incompleteDepartmentDiag = false;
    private bool incompleteSemesterDiag = false;
    private bool incompleteAdvisorDiag = false;
    private bool incompleteCourseDiag = false;

    private bool faiureDialog = false;

    private string activeDiv;
    private string departmentSearchText;
    private string semesterSearchText;
    private string advisorSearchText;
    private string courseSearchText;

    private List<Department> departmentList = new List<Department>();
    private List<Semester> semesterList = new List<Semester>();
    private List<Advisor> advisorList = new List<Advisor>();
    private List<Course> courseList = new List<Course>();

    private Department DepartmentDiag = new Department();
    private Semester SemesterDiag = new Semester();
    private Advisor AdvisorDiag = new Advisor();
    private Course CourseDiag = new Course();

    AdmininstratorDashboard pageA;

    // Regex
    string semesterNamePattern = @"^[a-zA-Z0-9 \t]*$";
    string deptNamePattern = @"^[a-zA-Z ]*$";
    string advisorNamePattern = @"^[a-zA-Z .]*$";
    string advisorEmailPattern = @"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$";
    string courseCodePattern = @"^[A-Z0-9]*$";
    string courseNamePattern = @"^[a-zA-Z ]*$";

    // For addresses
    private List<string?> addresses = new List<string?> { "admin-home", null };
    private List<string> displayNames = new List<string> { "Administrator Home", "Administrator Dashboard" };

    protected override async Task OnInitializedAsync()
    {
        ToggleBlocking();
        pageA = new AdmininstratorDashboard(db);
        await pageA.init();
        DataTable depts = pageA.Departements;
        DataTable sems = pageA.Semesters;
        DataTable advis = pageA.Advisors;
        DataTable courses = pageA.Courses;

        int i = 0;
        foreach (DataRow rowd in depts.Rows)
        {
            departmentList.Add(new Department { idx = i, id = Convert.ToInt32(rowd["id"]), name = Convert.ToString(rowd["name"]) });
            i++;
        }

        i = 0;
        foreach (DataRow rows in sems.Rows)
        {
            semesterList.Add(new Semester { idx = i, id = Convert.ToInt32(rows["id"]), name = Convert.ToString(rows["name"]) });
            i++;
        }

        i = 0;
        foreach (DataRow rowa in advis.Rows)
        {
            advisorList.Add(new Advisor { idx = i, id = Convert.ToInt32(rowa["id"]), name = Convert.ToString(rowa["name"]), email = Convert.ToString(rowa["email"]) });
            i++;
        }

        i = 0;
        foreach (DataRow rowc in courses.Rows)
        {
            courseList.Add(new Course { idx = i, id = Convert.ToInt32(rowc["id"]), code = Convert.ToString(rowc["code"]), name = Convert.ToString(rowc["name"]), semester = Convert.ToInt32(rowc["semester_id"])});
            i++;
        }
        ToggleBlocking();
    }

    // Regex check
    private bool regexSemester()
    {
        if (SemesterDiag.name is null) return false;
        return Regex.IsMatch(SemesterDiag.name, semesterNamePattern);
    }

    private bool regexDepartment()
    {
        if (DepartmentDiag.name is null) return false;
        return Regex.IsMatch(DepartmentDiag.name, deptNamePattern);
    }

    private bool regexAdvisor()
    {
        if (AdvisorDiag.name is null || AdvisorDiag.email is null) return false;
        return Regex.IsMatch(AdvisorDiag.name, advisorNamePattern) && Regex.IsMatch(AdvisorDiag.email, advisorEmailPattern);
    }

    private bool regexCourse()
    {
        if (CourseDiag.name is null || CourseDiag.code is null || CourseDiag.semester == null) return false;
        return Regex.IsMatch(CourseDiag.name, courseNamePattern) && Regex.IsMatch(CourseDiag.code, courseCodePattern) && (CourseDiag.semester > 0);
    }


    // for Department CRUD
    private void UpdateDepartmentOpen(int rowIdx)
    {
        DepartmentDiag = departmentList[rowIdx];
        updateDepartmentDiag = true;
        StateHasChanged();
    }

    private void UpdateDepartmentClose()
    {
        updateDepartmentDiag = false;
        StateHasChanged();
    }

    private void AddDepartmentOpen()
    {
        DepartmentDiag = new Department();
        addDepartmentDiag = true;
        StateHasChanged();
    }

    private void AddDepartmentClose()
    {
        addDepartmentDiag = false;
        StateHasChanged();
    }

    private void RemoveDepartmentOpen(int rowIdx)
    {
        DepartmentDiag = departmentList[rowIdx];
        removeDepartmentDiag = true;
        StateHasChanged();
    }

    private void RemoveDepartmentClose()
    {
        removeDepartmentDiag = false;
        StateHasChanged();
    }

    // for Semester CRUD
    private void UpdateSemesterOpen(int rowIdx)
    {
        SemesterDiag = semesterList[rowIdx];
        updateSemesterDiag = true;
        StateHasChanged();
    }

    private void UpdateSemesterClose()
    {
        updateSemesterDiag = false;
        StateHasChanged();
    }

    private void AddSemesterOpen()
    {
        SemesterDiag = new Semester();
        addSemesterDiag = true;
        StateHasChanged();
    }

    private void AddSemesterClose()
    {
        addSemesterDiag = false;
        StateHasChanged();
    }

    private void RemoveSemesterOpen(int rowIdx)
    {
        SemesterDiag = semesterList[rowIdx];
        removeSemesterDiag = true;
        StateHasChanged();
    }

    private void RemoveSemesterClose()
    {
        removeSemesterDiag = false;
        StateHasChanged();
    }

    // for Course CRUD
    private async Task UpdateCourseOpen(int rowIdx)
    {
        CourseDiag = courseList[rowIdx];
        CourseDiag.departments = (await db.GetCourseDeptsLinks(CourseDiag.id)).ToArray();
        updateCourseDiag = true;
        StateHasChanged();
    }

    private void UpdateCourseClose()
    {
        updateCourseDiag = false;
        StateHasChanged();
    }

    private void AddCourseOpen()
    {
        CourseDiag = new Course();
        addCourseDiag = true;
        StateHasChanged();
    }

    private void AddCourseClose()
    {
        addCourseDiag = false;
        StateHasChanged();
    }

    private void RemoveCourseOpen(int rowIdx)
    {
        CourseDiag = courseList[rowIdx];
        removeCourseDiag = true;
        StateHasChanged();
    }

    private void RemoveCourseClose()
    {
        removeCourseDiag = false;
        StateHasChanged();
    }

    // for Advisor CRUD
    private void UpdateAdvisorOpen(int rowIdx)
    {
        AdvisorDiag = advisorList[rowIdx];
        updateAdvisorDiag = true;
        StateHasChanged();
    }

    private void UpdateAdvisorClose()
    {
        updateAdvisorDiag = false;
        StateHasChanged();
    }

    private void AddAdvisorOpen()
    {
        AdvisorDiag = new Advisor();
        addAdvisorDiag = true;
        StateHasChanged();
    }

    private void AddAdvisorClose()
    {
        addAdvisorDiag = false;
        StateHasChanged();
    }

    private void RemoveAdvisorOpen(int rowIdx)
    {
        AdvisorDiag = advisorList[rowIdx];
        removeAdvisorDiag = true;
        StateHasChanged();
    }

    private void RemoveAdvisorClose()
    {
        removeAdvisorDiag = false;
        StateHasChanged();
    }

    // for removal tasks
    private async Task RemoveDepartmentWithExceptionHandling(Department dept)
    {
        if(await db.DropDepartment(dept.id) == null) { departmentList.RemoveAt(dept.idx); }
        else { faiureDialog = true; }
    }

    private async Task RemoveSemesterWithExceptionHandling(Semester sem)
    {
        if (await db.DropSemester(sem.id) == null) { semesterList.RemoveAt(sem.idx); }
        else { faiureDialog = true; }
    }

    private async Task RemoveCoursesWithExceptionHandling(Course course)
    {
        if (await db.DropCourse(course.id) == null) { courseList.RemoveAt(course.idx); }
        else { faiureDialog = true; }
    }

    private async Task RemoveAdvisorWithExceptionHandling(Advisor advi)
    {
        if (await db.DropAdvisor(advi.id) == null) { advisorList.RemoveAt(advi.idx); }
        else { faiureDialog = true; }
    }

    private void ToggleBlocking()
    {
        blocking = (blocking) ? false : true;
        StateHasChanged();
    }

    private IEnumerable<Department> FilteredDepartments =>
        string.IsNullOrEmpty(departmentSearchText)
            ? departmentList
            : departmentList.Where(d => d.name.StartsWith(departmentSearchText, StringComparison.OrdinalIgnoreCase));

    private IEnumerable<Semester> FilteredSemesters =>
        string.IsNullOrEmpty(semesterSearchText)
            ? semesterList
            : semesterList.Where(s => s.name.StartsWith(semesterSearchText, StringComparison.OrdinalIgnoreCase));

    private IEnumerable<Advisor> FilteredAdvisors =>
        string.IsNullOrEmpty(advisorSearchText)
            ? advisorList
            : advisorList.Where(a => a.email.StartsWith(advisorSearchText, StringComparison.OrdinalIgnoreCase) ||
                                     a.name.StartsWith(advisorSearchText, StringComparison.OrdinalIgnoreCase));

    private IEnumerable<Course> FilteredCourses =>
        string.IsNullOrEmpty(courseSearchText)
            ? courseList
            : courseList.Where(c => c.code.StartsWith(courseSearchText, StringComparison.OrdinalIgnoreCase) ||
                                    c.name.StartsWith(courseSearchText, StringComparison.OrdinalIgnoreCase));

    public class Department
    {
        public int idx { get; set; }
        public int id { get; set; }
        public string name { get; set; }
    }

    public class Semester
    {
        public int idx { get; set; }
        public int id { get; set; }
        public string name { get; set; }
    }

    public class Advisor
    {
        public int idx { get; set; }
        public int id { get; set; }
        public string name { get; set; }
        public string email { get; set; }
    }

    public class Course
    {
        public int idx { get; set; }
        public int id { get; set; }
        public string code { get; set; }
        public string name { get; set; }
        public int semester { get; set; }
        public int[] departments { get; set; } = { };
    }
}
